// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NetifeMessage.proto

#include "NetifeMessage.pb.h"
#include "NetifeMessage.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace NetifeMessage {

static const char* NetifeService_method_names[] = {
  "/NetifeMessage.NetifeService/ProcessProbe",
  "/NetifeMessage.NetifeService/Register",
  "/NetifeMessage.NetifeService/Composer",
  "/NetifeMessage.NetifeService/Command",
  "/NetifeMessage.NetifeService/ScriptRegister",
  "/NetifeMessage.NetifeService/ScriptDebug",
};

std::unique_ptr< NetifeService::Stub> NetifeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetifeService::Stub> stub(new NetifeService::Stub(channel, options));
  return stub;
}

NetifeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProcessProbe_(NetifeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(NetifeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Composer_(NetifeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Command_(NetifeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScriptRegister_(NetifeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ScriptDebug_(NetifeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetifeService::Stub::ProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::NetifeMessage::NetifeProbeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessProbe_, context, request, response);
}

void NetifeService::Stub::async::ProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessProbe_, context, request, response, std::move(f));
}

void NetifeService::Stub::async::ProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessProbe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>* NetifeService::Stub::PrepareAsyncProcessProbeRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetifeMessage::NetifeProbeResponse, ::NetifeMessage::NetifeProbeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessProbe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>* NetifeService::Stub::AsyncProcessProbeRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessProbeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetifeService::Stub::Register(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::NetifeMessage::NetifeRegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NetifeMessage::NetifeRegisterRequest, ::NetifeMessage::NetifeRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void NetifeService::Stub::async::Register(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest* request, ::NetifeMessage::NetifeRegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NetifeMessage::NetifeRegisterRequest, ::NetifeMessage::NetifeRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void NetifeService::Stub::async::Register(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest* request, ::NetifeMessage::NetifeRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeRegisterResponse>* NetifeService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetifeMessage::NetifeRegisterResponse, ::NetifeMessage::NetifeRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeRegisterResponse>* NetifeService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetifeService::Stub::Composer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::NetifeMessage::NetifeComposerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NetifeMessage::NetifeComposerRequest, ::NetifeMessage::NetifeComposerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Composer_, context, request, response);
}

void NetifeService::Stub::async::Composer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest* request, ::NetifeMessage::NetifeComposerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NetifeMessage::NetifeComposerRequest, ::NetifeMessage::NetifeComposerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Composer_, context, request, response, std::move(f));
}

void NetifeService::Stub::async::Composer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest* request, ::NetifeMessage::NetifeComposerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Composer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeComposerResponse>* NetifeService::Stub::PrepareAsyncComposerRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetifeMessage::NetifeComposerResponse, ::NetifeMessage::NetifeComposerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Composer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeComposerResponse>* NetifeService::Stub::AsyncComposerRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncComposerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetifeService::Stub::Command(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::NetifeMessage::NetifePluginCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NetifeMessage::NetifePluginCommandRequest, ::NetifeMessage::NetifePluginCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Command_, context, request, response);
}

void NetifeService::Stub::async::Command(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest* request, ::NetifeMessage::NetifePluginCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NetifeMessage::NetifePluginCommandRequest, ::NetifeMessage::NetifePluginCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, std::move(f));
}

void NetifeService::Stub::async::Command(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest* request, ::NetifeMessage::NetifePluginCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Command_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifePluginCommandResponse>* NetifeService::Stub::PrepareAsyncCommandRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetifeMessage::NetifePluginCommandResponse, ::NetifeMessage::NetifePluginCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Command_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifePluginCommandResponse>* NetifeService::Stub::AsyncCommandRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetifeService::Stub::ScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::NetifeMessage::NetifeScriptRegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NetifeMessage::NetifeScriptRegisterRequest, ::NetifeMessage::NetifeScriptRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScriptRegister_, context, request, response);
}

void NetifeService::Stub::async::ScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest* request, ::NetifeMessage::NetifeScriptRegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NetifeMessage::NetifeScriptRegisterRequest, ::NetifeMessage::NetifeScriptRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScriptRegister_, context, request, response, std::move(f));
}

void NetifeService::Stub::async::ScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest* request, ::NetifeMessage::NetifeScriptRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScriptRegister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptRegisterResponse>* NetifeService::Stub::PrepareAsyncScriptRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetifeMessage::NetifeScriptRegisterResponse, ::NetifeMessage::NetifeScriptRegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScriptRegister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptRegisterResponse>* NetifeService::Stub::AsyncScriptRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScriptRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetifeService::Stub::ScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::NetifeMessage::NetifeScriptDebuggerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NetifeMessage::NetifeScriptDebuggerRequest, ::NetifeMessage::NetifeScriptDebuggerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ScriptDebug_, context, request, response);
}

void NetifeService::Stub::async::ScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::NetifeMessage::NetifeScriptDebuggerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NetifeMessage::NetifeScriptDebuggerRequest, ::NetifeMessage::NetifeScriptDebuggerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScriptDebug_, context, request, response, std::move(f));
}

void NetifeService::Stub::async::ScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::NetifeMessage::NetifeScriptDebuggerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ScriptDebug_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptDebuggerResponse>* NetifeService::Stub::PrepareAsyncScriptDebugRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetifeMessage::NetifeScriptDebuggerResponse, ::NetifeMessage::NetifeScriptDebuggerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ScriptDebug_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptDebuggerResponse>* NetifeService::Stub::AsyncScriptDebugRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScriptDebugRaw(context, request, cq);
  result->StartCall();
  return result;
}

NetifeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetifeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetifeService::Service, ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetifeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NetifeMessage::NetifeProbeRequest* req,
             ::NetifeMessage::NetifeProbeResponse* resp) {
               return service->ProcessProbe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetifeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetifeService::Service, ::NetifeMessage::NetifeRegisterRequest, ::NetifeMessage::NetifeRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetifeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NetifeMessage::NetifeRegisterRequest* req,
             ::NetifeMessage::NetifeRegisterResponse* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetifeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetifeService::Service, ::NetifeMessage::NetifeComposerRequest, ::NetifeMessage::NetifeComposerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetifeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NetifeMessage::NetifeComposerRequest* req,
             ::NetifeMessage::NetifeComposerResponse* resp) {
               return service->Composer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetifeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetifeService::Service, ::NetifeMessage::NetifePluginCommandRequest, ::NetifeMessage::NetifePluginCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetifeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NetifeMessage::NetifePluginCommandRequest* req,
             ::NetifeMessage::NetifePluginCommandResponse* resp) {
               return service->Command(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetifeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetifeService::Service, ::NetifeMessage::NetifeScriptRegisterRequest, ::NetifeMessage::NetifeScriptRegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetifeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NetifeMessage::NetifeScriptRegisterRequest* req,
             ::NetifeMessage::NetifeScriptRegisterResponse* resp) {
               return service->ScriptRegister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetifeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetifeService::Service, ::NetifeMessage::NetifeScriptDebuggerRequest, ::NetifeMessage::NetifeScriptDebuggerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetifeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NetifeMessage::NetifeScriptDebuggerRequest* req,
             ::NetifeMessage::NetifeScriptDebuggerResponse* resp) {
               return service->ScriptDebug(ctx, req, resp);
             }, this)));
}

NetifeService::Service::~Service() {
}

::grpc::Status NetifeService::Service::ProcessProbe(::grpc::ServerContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetifeService::Service::Register(::grpc::ServerContext* context, const ::NetifeMessage::NetifeRegisterRequest* request, ::NetifeMessage::NetifeRegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetifeService::Service::Composer(::grpc::ServerContext* context, const ::NetifeMessage::NetifeComposerRequest* request, ::NetifeMessage::NetifeComposerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetifeService::Service::Command(::grpc::ServerContext* context, const ::NetifeMessage::NetifePluginCommandRequest* request, ::NetifeMessage::NetifePluginCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetifeService::Service::ScriptRegister(::grpc::ServerContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest* request, ::NetifeMessage::NetifeScriptRegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetifeService::Service::ScriptDebug(::grpc::ServerContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::NetifeMessage::NetifeScriptDebuggerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace NetifeMessage

