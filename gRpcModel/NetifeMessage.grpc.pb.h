// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NetifeMessage.proto
#ifndef GRPC_NetifeMessage_2eproto__INCLUDED
#define GRPC_NetifeMessage_2eproto__INCLUDED

#include "NetifeMessage.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace NetifeMessage {

// Dispatcher 服务
class NetifeService final {
 public:
  static constexpr char const* service_full_name() {
    return "NetifeMessage.NetifeService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::NetifeMessage::NetifeProbeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>> AsyncProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>>(AsyncProcessProbeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>> PrepareAsyncProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>>(PrepareAsyncProcessProbeRaw(context, request, cq));
    }
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::NetifeMessage::NetifeRegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeRegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeRegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeRegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeRegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status Composer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::NetifeMessage::NetifeComposerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeComposerResponse>> AsyncComposer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeComposerResponse>>(AsyncComposerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeComposerResponse>> PrepareAsyncComposer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeComposerResponse>>(PrepareAsyncComposerRaw(context, request, cq));
    }
    virtual ::grpc::Status Command(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::NetifeMessage::NetifePluginCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifePluginCommandResponse>> AsyncCommand(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifePluginCommandResponse>>(AsyncCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifePluginCommandResponse>> PrepareAsyncCommand(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifePluginCommandResponse>>(PrepareAsyncCommandRaw(context, request, cq));
    }
    virtual ::grpc::Status ScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::NetifeMessage::NetifeScriptRegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptRegisterResponse>> AsyncScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptRegisterResponse>>(AsyncScriptRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptRegisterResponse>> PrepareAsyncScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptRegisterResponse>>(PrepareAsyncScriptRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status ScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::NetifeMessage::NetifeScriptDebuggerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptDebuggerResponse>> AsyncScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptDebuggerResponse>>(AsyncScriptDebugRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptDebuggerResponse>> PrepareAsyncScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptDebuggerResponse>>(PrepareAsyncScriptDebugRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest* request, ::NetifeMessage::NetifeRegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest* request, ::NetifeMessage::NetifeRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Composer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest* request, ::NetifeMessage::NetifeComposerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Composer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest* request, ::NetifeMessage::NetifeComposerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Command(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest* request, ::NetifeMessage::NetifePluginCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Command(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest* request, ::NetifeMessage::NetifePluginCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest* request, ::NetifeMessage::NetifeScriptRegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest* request, ::NetifeMessage::NetifeScriptRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::NetifeMessage::NetifeScriptDebuggerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::NetifeMessage::NetifeScriptDebuggerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>* AsyncProcessProbeRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>* PrepareAsyncProcessProbeRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeRegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeRegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeComposerResponse>* AsyncComposerRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeComposerResponse>* PrepareAsyncComposerRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifePluginCommandResponse>* AsyncCommandRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifePluginCommandResponse>* PrepareAsyncCommandRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptRegisterResponse>* AsyncScriptRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptRegisterResponse>* PrepareAsyncScriptRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptDebuggerResponse>* AsyncScriptDebugRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeScriptDebuggerResponse>* PrepareAsyncScriptDebugRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::NetifeMessage::NetifeProbeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>> AsyncProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>>(AsyncProcessProbeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>> PrepareAsyncProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>>(PrepareAsyncProcessProbeRaw(context, request, cq));
    }
    ::grpc::Status Register(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::NetifeMessage::NetifeRegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeRegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeRegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeRegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeRegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Composer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::NetifeMessage::NetifeComposerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeComposerResponse>> AsyncComposer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeComposerResponse>>(AsyncComposerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeComposerResponse>> PrepareAsyncComposer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeComposerResponse>>(PrepareAsyncComposerRaw(context, request, cq));
    }
    ::grpc::Status Command(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::NetifeMessage::NetifePluginCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifePluginCommandResponse>> AsyncCommand(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifePluginCommandResponse>>(AsyncCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifePluginCommandResponse>> PrepareAsyncCommand(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifePluginCommandResponse>>(PrepareAsyncCommandRaw(context, request, cq));
    }
    ::grpc::Status ScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::NetifeMessage::NetifeScriptRegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptRegisterResponse>> AsyncScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptRegisterResponse>>(AsyncScriptRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptRegisterResponse>> PrepareAsyncScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptRegisterResponse>>(PrepareAsyncScriptRegisterRaw(context, request, cq));
    }
    ::grpc::Status ScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::NetifeMessage::NetifeScriptDebuggerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptDebuggerResponse>> AsyncScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptDebuggerResponse>>(AsyncScriptDebugRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptDebuggerResponse>> PrepareAsyncScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptDebuggerResponse>>(PrepareAsyncScriptDebugRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, std::function<void(::grpc::Status)>) override;
      void ProcessProbe(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Register(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest* request, ::NetifeMessage::NetifeRegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest* request, ::NetifeMessage::NetifeRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Composer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest* request, ::NetifeMessage::NetifeComposerResponse* response, std::function<void(::grpc::Status)>) override;
      void Composer(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest* request, ::NetifeMessage::NetifeComposerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Command(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest* request, ::NetifeMessage::NetifePluginCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void Command(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest* request, ::NetifeMessage::NetifePluginCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest* request, ::NetifeMessage::NetifeScriptRegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void ScriptRegister(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest* request, ::NetifeMessage::NetifeScriptRegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::NetifeMessage::NetifeScriptDebuggerResponse* response, std::function<void(::grpc::Status)>) override;
      void ScriptDebug(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::NetifeMessage::NetifeScriptDebuggerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>* AsyncProcessProbeRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>* PrepareAsyncProcessProbeRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeRegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeRegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeComposerResponse>* AsyncComposerRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeComposerResponse>* PrepareAsyncComposerRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeComposerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifePluginCommandResponse>* AsyncCommandRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifePluginCommandResponse>* PrepareAsyncCommandRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifePluginCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptRegisterResponse>* AsyncScriptRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptRegisterResponse>* PrepareAsyncScriptRegisterRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptDebuggerResponse>* AsyncScriptDebugRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeScriptDebuggerResponse>* PrepareAsyncScriptDebugRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessProbe_;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Composer_;
    const ::grpc::internal::RpcMethod rpcmethod_Command_;
    const ::grpc::internal::RpcMethod rpcmethod_ScriptRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_ScriptDebug_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ProcessProbe(::grpc::ServerContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response);
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::NetifeMessage::NetifeRegisterRequest* request, ::NetifeMessage::NetifeRegisterResponse* response);
    virtual ::grpc::Status Composer(::grpc::ServerContext* context, const ::NetifeMessage::NetifeComposerRequest* request, ::NetifeMessage::NetifeComposerResponse* response);
    virtual ::grpc::Status Command(::grpc::ServerContext* context, const ::NetifeMessage::NetifePluginCommandRequest* request, ::NetifeMessage::NetifePluginCommandResponse* response);
    virtual ::grpc::Status ScriptRegister(::grpc::ServerContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest* request, ::NetifeMessage::NetifeScriptRegisterResponse* response);
    virtual ::grpc::Status ScriptDebug(::grpc::ServerContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::NetifeMessage::NetifeScriptDebuggerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessProbe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessProbe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ProcessProbe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProbe(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessProbe(::grpc::ServerContext* context, ::NetifeMessage::NetifeProbeRequest* request, ::grpc::ServerAsyncResponseWriter< ::NetifeMessage::NetifeProbeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeRegisterRequest* /*request*/, ::NetifeMessage::NetifeRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::NetifeMessage::NetifeRegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::NetifeMessage::NetifeRegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Composer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Composer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Composer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Composer(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeComposerRequest* /*request*/, ::NetifeMessage::NetifeComposerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComposer(::grpc::ServerContext* context, ::NetifeMessage::NetifeComposerRequest* request, ::grpc::ServerAsyncResponseWriter< ::NetifeMessage::NetifeComposerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Command() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifePluginCommandRequest* /*request*/, ::NetifeMessage::NetifePluginCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommand(::grpc::ServerContext* context, ::NetifeMessage::NetifePluginCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::NetifeMessage::NetifePluginCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScriptRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScriptRegister() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ScriptRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptRegister(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptRegisterRequest* /*request*/, ::NetifeMessage::NetifeScriptRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScriptRegister(::grpc::ServerContext* context, ::NetifeMessage::NetifeScriptRegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::NetifeMessage::NetifeScriptRegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ScriptDebug : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ScriptDebug() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ScriptDebug() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptDebug(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptDebuggerRequest* /*request*/, ::NetifeMessage::NetifeScriptDebuggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScriptDebug(::grpc::ServerContext* context, ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::grpc::ServerAsyncResponseWriter< ::NetifeMessage::NetifeScriptDebuggerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ProcessProbe<WithAsyncMethod_Register<WithAsyncMethod_Composer<WithAsyncMethod_Command<WithAsyncMethod_ScriptRegister<WithAsyncMethod_ScriptDebug<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ProcessProbe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessProbe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response) { return this->ProcessProbe(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessProbe(
        ::grpc::MessageAllocator< ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProcessProbe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProbe(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessProbe(
      ::grpc::CallbackServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeRegisterRequest, ::NetifeMessage::NetifeRegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NetifeMessage::NetifeRegisterRequest* request, ::NetifeMessage::NetifeRegisterResponse* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::NetifeMessage::NetifeRegisterRequest, ::NetifeMessage::NetifeRegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeRegisterRequest, ::NetifeMessage::NetifeRegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeRegisterRequest* /*request*/, ::NetifeMessage::NetifeRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::NetifeMessage::NetifeRegisterRequest* /*request*/, ::NetifeMessage::NetifeRegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Composer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Composer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeComposerRequest, ::NetifeMessage::NetifeComposerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NetifeMessage::NetifeComposerRequest* request, ::NetifeMessage::NetifeComposerResponse* response) { return this->Composer(context, request, response); }));}
    void SetMessageAllocatorFor_Composer(
        ::grpc::MessageAllocator< ::NetifeMessage::NetifeComposerRequest, ::NetifeMessage::NetifeComposerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeComposerRequest, ::NetifeMessage::NetifeComposerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Composer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Composer(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeComposerRequest* /*request*/, ::NetifeMessage::NetifeComposerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Composer(
      ::grpc::CallbackServerContext* /*context*/, const ::NetifeMessage::NetifeComposerRequest* /*request*/, ::NetifeMessage::NetifeComposerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Command() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifePluginCommandRequest, ::NetifeMessage::NetifePluginCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NetifeMessage::NetifePluginCommandRequest* request, ::NetifeMessage::NetifePluginCommandResponse* response) { return this->Command(context, request, response); }));}
    void SetMessageAllocatorFor_Command(
        ::grpc::MessageAllocator< ::NetifeMessage::NetifePluginCommandRequest, ::NetifeMessage::NetifePluginCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifePluginCommandRequest, ::NetifeMessage::NetifePluginCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifePluginCommandRequest* /*request*/, ::NetifeMessage::NetifePluginCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Command(
      ::grpc::CallbackServerContext* /*context*/, const ::NetifeMessage::NetifePluginCommandRequest* /*request*/, ::NetifeMessage::NetifePluginCommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScriptRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScriptRegister() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeScriptRegisterRequest, ::NetifeMessage::NetifeScriptRegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NetifeMessage::NetifeScriptRegisterRequest* request, ::NetifeMessage::NetifeScriptRegisterResponse* response) { return this->ScriptRegister(context, request, response); }));}
    void SetMessageAllocatorFor_ScriptRegister(
        ::grpc::MessageAllocator< ::NetifeMessage::NetifeScriptRegisterRequest, ::NetifeMessage::NetifeScriptRegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeScriptRegisterRequest, ::NetifeMessage::NetifeScriptRegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScriptRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptRegister(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptRegisterRequest* /*request*/, ::NetifeMessage::NetifeScriptRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScriptRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::NetifeMessage::NetifeScriptRegisterRequest* /*request*/, ::NetifeMessage::NetifeScriptRegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ScriptDebug : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ScriptDebug() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeScriptDebuggerRequest, ::NetifeMessage::NetifeScriptDebuggerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NetifeMessage::NetifeScriptDebuggerRequest* request, ::NetifeMessage::NetifeScriptDebuggerResponse* response) { return this->ScriptDebug(context, request, response); }));}
    void SetMessageAllocatorFor_ScriptDebug(
        ::grpc::MessageAllocator< ::NetifeMessage::NetifeScriptDebuggerRequest, ::NetifeMessage::NetifeScriptDebuggerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeScriptDebuggerRequest, ::NetifeMessage::NetifeScriptDebuggerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ScriptDebug() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptDebug(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptDebuggerRequest* /*request*/, ::NetifeMessage::NetifeScriptDebuggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScriptDebug(
      ::grpc::CallbackServerContext* /*context*/, const ::NetifeMessage::NetifeScriptDebuggerRequest* /*request*/, ::NetifeMessage::NetifeScriptDebuggerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ProcessProbe<WithCallbackMethod_Register<WithCallbackMethod_Composer<WithCallbackMethod_Command<WithCallbackMethod_ScriptRegister<WithCallbackMethod_ScriptDebug<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ProcessProbe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessProbe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ProcessProbe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProbe(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeRegisterRequest* /*request*/, ::NetifeMessage::NetifeRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Composer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Composer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Composer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Composer(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeComposerRequest* /*request*/, ::NetifeMessage::NetifeComposerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Command() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifePluginCommandRequest* /*request*/, ::NetifeMessage::NetifePluginCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScriptRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScriptRegister() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ScriptRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptRegister(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptRegisterRequest* /*request*/, ::NetifeMessage::NetifeScriptRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ScriptDebug : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ScriptDebug() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ScriptDebug() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptDebug(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptDebuggerRequest* /*request*/, ::NetifeMessage::NetifeScriptDebuggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessProbe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessProbe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ProcessProbe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProbe(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessProbe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeRegisterRequest* /*request*/, ::NetifeMessage::NetifeRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Composer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Composer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Composer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Composer(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeComposerRequest* /*request*/, ::NetifeMessage::NetifeComposerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestComposer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Command() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifePluginCommandRequest* /*request*/, ::NetifeMessage::NetifePluginCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScriptRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScriptRegister() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ScriptRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptRegister(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptRegisterRequest* /*request*/, ::NetifeMessage::NetifeScriptRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScriptRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ScriptDebug : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ScriptDebug() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ScriptDebug() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptDebug(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptDebuggerRequest* /*request*/, ::NetifeMessage::NetifeScriptDebuggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScriptDebug(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessProbe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessProbe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessProbe(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProcessProbe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProbe(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessProbe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeRegisterRequest* /*request*/, ::NetifeMessage::NetifeRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Composer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Composer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Composer(context, request, response); }));
    }
    ~WithRawCallbackMethod_Composer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Composer(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeComposerRequest* /*request*/, ::NetifeMessage::NetifeComposerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Composer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Command() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Command(context, request, response); }));
    }
    ~WithRawCallbackMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifePluginCommandRequest* /*request*/, ::NetifeMessage::NetifePluginCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Command(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScriptRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScriptRegister() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScriptRegister(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScriptRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptRegister(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptRegisterRequest* /*request*/, ::NetifeMessage::NetifeScriptRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScriptRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ScriptDebug : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ScriptDebug() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ScriptDebug(context, request, response); }));
    }
    ~WithRawCallbackMethod_ScriptDebug() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ScriptDebug(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptDebuggerRequest* /*request*/, ::NetifeMessage::NetifeScriptDebuggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ScriptDebug(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessProbe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessProbe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>* streamer) {
                       return this->StreamedProcessProbe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessProbe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessProbe(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessProbe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetifeMessage::NetifeProbeRequest,::NetifeMessage::NetifeProbeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NetifeMessage::NetifeRegisterRequest, ::NetifeMessage::NetifeRegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NetifeMessage::NetifeRegisterRequest, ::NetifeMessage::NetifeRegisterResponse>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeRegisterRequest* /*request*/, ::NetifeMessage::NetifeRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetifeMessage::NetifeRegisterRequest,::NetifeMessage::NetifeRegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Composer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Composer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NetifeMessage::NetifeComposerRequest, ::NetifeMessage::NetifeComposerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NetifeMessage::NetifeComposerRequest, ::NetifeMessage::NetifeComposerResponse>* streamer) {
                       return this->StreamedComposer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Composer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Composer(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeComposerRequest* /*request*/, ::NetifeMessage::NetifeComposerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedComposer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetifeMessage::NetifeComposerRequest,::NetifeMessage::NetifeComposerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Command() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NetifeMessage::NetifePluginCommandRequest, ::NetifeMessage::NetifePluginCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NetifeMessage::NetifePluginCommandRequest, ::NetifeMessage::NetifePluginCommandResponse>* streamer) {
                       return this->StreamedCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Command(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifePluginCommandRequest* /*request*/, ::NetifeMessage::NetifePluginCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetifeMessage::NetifePluginCommandRequest,::NetifeMessage::NetifePluginCommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScriptRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScriptRegister() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NetifeMessage::NetifeScriptRegisterRequest, ::NetifeMessage::NetifeScriptRegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NetifeMessage::NetifeScriptRegisterRequest, ::NetifeMessage::NetifeScriptRegisterResponse>* streamer) {
                       return this->StreamedScriptRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScriptRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScriptRegister(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptRegisterRequest* /*request*/, ::NetifeMessage::NetifeScriptRegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScriptRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetifeMessage::NetifeScriptRegisterRequest,::NetifeMessage::NetifeScriptRegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ScriptDebug : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ScriptDebug() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NetifeMessage::NetifeScriptDebuggerRequest, ::NetifeMessage::NetifeScriptDebuggerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NetifeMessage::NetifeScriptDebuggerRequest, ::NetifeMessage::NetifeScriptDebuggerResponse>* streamer) {
                       return this->StreamedScriptDebug(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ScriptDebug() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ScriptDebug(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeScriptDebuggerRequest* /*request*/, ::NetifeMessage::NetifeScriptDebuggerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScriptDebug(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetifeMessage::NetifeScriptDebuggerRequest,::NetifeMessage::NetifeScriptDebuggerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ProcessProbe<WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Composer<WithStreamedUnaryMethod_Command<WithStreamedUnaryMethod_ScriptRegister<WithStreamedUnaryMethod_ScriptDebug<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ProcessProbe<WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Composer<WithStreamedUnaryMethod_Command<WithStreamedUnaryMethod_ScriptRegister<WithStreamedUnaryMethod_ScriptDebug<Service > > > > > > StreamedService;
};

// 消息上报
class NetifePost final {
 public:
  static constexpr char const* service_full_name() {
    return "NetifeMessage.NetifePost";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::NetifeMessage::NetifeProbeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>> AsyncUploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>>(AsyncUploadRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>> PrepareAsyncUploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>>(PrepareAsyncUploadRequestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void UploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>* AsyncUploadRequestRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NetifeMessage::NetifeProbeResponse>* PrepareAsyncUploadRequestRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::NetifeMessage::NetifeProbeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>> AsyncUploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>>(AsyncUploadRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>> PrepareAsyncUploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>>(PrepareAsyncUploadRequestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, std::function<void(::grpc::Status)>) override;
      void UploadRequest(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>* AsyncUploadRequestRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NetifeMessage::NetifeProbeResponse>* PrepareAsyncUploadRequestRaw(::grpc::ClientContext* context, const ::NetifeMessage::NetifeProbeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UploadRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UploadRequest(::grpc::ServerContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UploadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadRequest(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadRequest(::grpc::ServerContext* context, ::NetifeMessage::NetifeProbeRequest* request, ::grpc::ServerAsyncResponseWriter< ::NetifeMessage::NetifeProbeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UploadRequest<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UploadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadRequest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NetifeMessage::NetifeProbeRequest* request, ::NetifeMessage::NetifeProbeResponse* response) { return this->UploadRequest(context, request, response); }));}
    void SetMessageAllocatorFor_UploadRequest(
        ::grpc::MessageAllocator< ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadRequest(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UploadRequest<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UploadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UploadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadRequest(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UploadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadRequest(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadRequest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadRequest(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NetifeMessage::NetifeProbeRequest, ::NetifeMessage::NetifeProbeResponse>* streamer) {
                       return this->StreamedUploadRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadRequest(::grpc::ServerContext* /*context*/, const ::NetifeMessage::NetifeProbeRequest* /*request*/, ::NetifeMessage::NetifeProbeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NetifeMessage::NetifeProbeRequest,::NetifeMessage::NetifeProbeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UploadRequest<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UploadRequest<Service > StreamedService;
};

}  // namespace NetifeMessage


#endif  // GRPC_NetifeMessage_2eproto__INCLUDED
