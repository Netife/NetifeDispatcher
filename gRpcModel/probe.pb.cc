// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: probe.proto

#include "probe.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace NetifeMessage {
PROTOBUF_CONSTEXPR NetifeProbeRequest::NetifeProbeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.raw_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ws_is_raw_text_)*/false} {}
struct NetifeProbeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetifeProbeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetifeProbeRequestDefaultTypeInternal() {}
  union {
    NetifeProbeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetifeProbeRequestDefaultTypeInternal _NetifeProbeRequest_default_instance_;
PROTOBUF_CONSTEXPR NetifeProbeResponse::NetifeProbeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetifeProbeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetifeProbeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetifeProbeResponseDefaultTypeInternal() {}
  union {
    NetifeProbeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetifeProbeResponseDefaultTypeInternal _NetifeProbeResponse_default_instance_;
}  // namespace NetifeMessage
static ::_pb::Metadata file_level_metadata_probe_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_probe_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_probe_2eproto = nullptr;

const uint32_t TableStruct_probe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeRequest, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeRequest, _impl_.ip_addr_),
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeRequest, _impl_.ip_port_),
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeRequest, _impl_.ws_is_raw_text_),
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeRequest, _impl_.raw_text_),
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeRequest, _impl_.pid_),
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeResponse, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::NetifeMessage::NetifeProbeResponse, _impl_.response_text_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::NetifeMessage::NetifeProbeRequest)},
  { 18, -1, -1, sizeof(::NetifeMessage::NetifeProbeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::NetifeMessage::_NetifeProbeRequest_default_instance_._instance,
  &::NetifeMessage::_NetifeProbeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_probe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013probe.proto\022\rNetifeMessage\"\225\002\n\022NetifeP"
  "robeRequest\022\014\n\004uuid\030\001 \001(\t\022\017\n\007ip_addr\030\002 \001"
  "(\t\022\017\n\007ip_port\030\003 \001(\t\022\033\n\016ws_is_raw_text\030\004 "
  "\001(\010H\000\210\001\001\022\020\n\010raw_text\030\005 \001(\t\022\020\n\003pid\030\006 \001(\tH"
  "\001\210\001\001\"H\n\013RequestType\022\010\n\004HTTP\020\000\022\t\n\005HTTPS\020\001"
  "\022\006\n\002WS\020\002\022\007\n\003WSS\020\003\022\010\n\004PING\020\004\022\t\n\005OTHER\020\005\")"
  "\n\017ApplicationType\022\n\n\006CLIENT\020\000\022\n\n\006SERVER\020"
  "\001B\021\n\017_ws_is_raw_textB\006\n\004_pid\":\n\023NetifePr"
  "obeResponse\022\014\n\004uuid\030\001 \001(\t\022\025\n\rresponse_te"
  "xt\030\002 \001(\t2f\n\022NetifeProbeService\022P\n\007Proces"
  "s\022!.NetifeMessage.NetifeProbeRequest\032\".N"
  "etifeMessage.NetifeProbeResponseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_probe_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_probe_2eproto = {
    false, false, 480, descriptor_table_protodef_probe_2eproto,
    "probe.proto",
    &descriptor_table_probe_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_probe_2eproto::offsets,
    file_level_metadata_probe_2eproto, file_level_enum_descriptors_probe_2eproto,
    file_level_service_descriptors_probe_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_probe_2eproto_getter() {
  return &descriptor_table_probe_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_probe_2eproto(&descriptor_table_probe_2eproto);
namespace NetifeMessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetifeProbeRequest_RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_probe_2eproto);
  return file_level_enum_descriptors_probe_2eproto[0];
}
bool NetifeProbeRequest_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest::HTTP;
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest::HTTPS;
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest::WS;
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest::WSS;
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest::PING;
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest::OTHER;
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest::RequestType_MIN;
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest::RequestType_MAX;
constexpr int NetifeProbeRequest::RequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetifeProbeRequest_ApplicationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_probe_2eproto);
  return file_level_enum_descriptors_probe_2eproto[1];
}
bool NetifeProbeRequest_ApplicationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NetifeProbeRequest_ApplicationType NetifeProbeRequest::CLIENT;
constexpr NetifeProbeRequest_ApplicationType NetifeProbeRequest::SERVER;
constexpr NetifeProbeRequest_ApplicationType NetifeProbeRequest::ApplicationType_MIN;
constexpr NetifeProbeRequest_ApplicationType NetifeProbeRequest::ApplicationType_MAX;
constexpr int NetifeProbeRequest::ApplicationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class NetifeProbeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<NetifeProbeRequest>()._impl_._has_bits_);
  static void set_has_ws_is_raw_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetifeProbeRequest::NetifeProbeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NetifeMessage.NetifeProbeRequest)
}
NetifeProbeRequest::NetifeProbeRequest(const NetifeProbeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetifeProbeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.ip_addr_){}
    , decltype(_impl_.ip_port_){}
    , decltype(_impl_.raw_text_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.ws_is_raw_text_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_addr().empty()) {
    _this->_impl_.ip_addr_.Set(from._internal_ip_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_port().empty()) {
    _this->_impl_.ip_port_.Set(from._internal_ip_port(), 
      _this->GetArenaForAllocation());
  }
  _impl_.raw_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_text().empty()) {
    _this->_impl_.raw_text_.Set(from._internal_raw_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pid()) {
    _this->_impl_.pid_.Set(from._internal_pid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ws_is_raw_text_ = from._impl_.ws_is_raw_text_;
  // @@protoc_insertion_point(copy_constructor:NetifeMessage.NetifeProbeRequest)
}

inline void NetifeProbeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.ip_addr_){}
    , decltype(_impl_.ip_port_){}
    , decltype(_impl_.raw_text_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.ws_is_raw_text_){false}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.raw_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetifeProbeRequest::~NetifeProbeRequest() {
  // @@protoc_insertion_point(destructor:NetifeMessage.NetifeProbeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetifeProbeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.ip_addr_.Destroy();
  _impl_.ip_port_.Destroy();
  _impl_.raw_text_.Destroy();
  _impl_.pid_.Destroy();
}

void NetifeProbeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetifeProbeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NetifeMessage.NetifeProbeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.ip_addr_.ClearToEmpty();
  _impl_.ip_port_.ClearToEmpty();
  _impl_.raw_text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pid_.ClearNonDefaultToEmpty();
  }
  _impl_.ws_is_raw_text_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetifeProbeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NetifeMessage.NetifeProbeRequest.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string ip_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NetifeMessage.NetifeProbeRequest.ip_addr"));
        } else
          goto handle_unusual;
        continue;
      // string ip_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NetifeMessage.NetifeProbeRequest.ip_port"));
        } else
          goto handle_unusual;
        continue;
      // optional bool ws_is_raw_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ws_is_raw_text(&has_bits);
          _impl_.ws_is_raw_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string raw_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_raw_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NetifeMessage.NetifeProbeRequest.raw_text"));
        } else
          goto handle_unusual;
        continue;
      // optional string pid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NetifeMessage.NetifeProbeRequest.pid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetifeProbeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetifeMessage.NetifeProbeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetifeMessage.NetifeProbeRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string ip_addr = 2;
  if (!this->_internal_ip_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_addr().data(), static_cast<int>(this->_internal_ip_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetifeMessage.NetifeProbeRequest.ip_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_addr(), target);
  }

  // string ip_port = 3;
  if (!this->_internal_ip_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_port().data(), static_cast<int>(this->_internal_ip_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetifeMessage.NetifeProbeRequest.ip_port");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_port(), target);
  }

  // optional bool ws_is_raw_text = 4;
  if (_internal_has_ws_is_raw_text()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_ws_is_raw_text(), target);
  }

  // string raw_text = 5;
  if (!this->_internal_raw_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_text().data(), static_cast<int>(this->_internal_raw_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetifeMessage.NetifeProbeRequest.raw_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_raw_text(), target);
  }

  // optional string pid = 6;
  if (_internal_has_pid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetifeMessage.NetifeProbeRequest.pid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetifeMessage.NetifeProbeRequest)
  return target;
}

size_t NetifeProbeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetifeMessage.NetifeProbeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string ip_addr = 2;
  if (!this->_internal_ip_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_addr());
  }

  // string ip_port = 3;
  if (!this->_internal_ip_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_port());
  }

  // string raw_text = 5;
  if (!this->_internal_raw_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_text());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string pid = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pid());
    }

    // optional bool ws_is_raw_text = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetifeProbeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetifeProbeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetifeProbeRequest::GetClassData() const { return &_class_data_; }


void NetifeProbeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetifeProbeRequest*>(&to_msg);
  auto& from = static_cast<const NetifeProbeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NetifeMessage.NetifeProbeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_ip_addr().empty()) {
    _this->_internal_set_ip_addr(from._internal_ip_addr());
  }
  if (!from._internal_ip_port().empty()) {
    _this->_internal_set_ip_port(from._internal_ip_port());
  }
  if (!from._internal_raw_text().empty()) {
    _this->_internal_set_raw_text(from._internal_raw_text());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pid(from._internal_pid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ws_is_raw_text_ = from._impl_.ws_is_raw_text_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetifeProbeRequest::CopyFrom(const NetifeProbeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetifeMessage.NetifeProbeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetifeProbeRequest::IsInitialized() const {
  return true;
}

void NetifeProbeRequest::InternalSwap(NetifeProbeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_addr_, lhs_arena,
      &other->_impl_.ip_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_port_, lhs_arena,
      &other->_impl_.ip_port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.raw_text_, lhs_arena,
      &other->_impl_.raw_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pid_, lhs_arena,
      &other->_impl_.pid_, rhs_arena
  );
  swap(_impl_.ws_is_raw_text_, other->_impl_.ws_is_raw_text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetifeProbeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_probe_2eproto_getter, &descriptor_table_probe_2eproto_once,
      file_level_metadata_probe_2eproto[0]);
}

// ===================================================================

class NetifeProbeResponse::_Internal {
 public:
};

NetifeProbeResponse::NetifeProbeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NetifeMessage.NetifeProbeResponse)
}
NetifeProbeResponse::NetifeProbeResponse(const NetifeProbeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetifeProbeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.response_text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.response_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response_text().empty()) {
    _this->_impl_.response_text_.Set(from._internal_response_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:NetifeMessage.NetifeProbeResponse)
}

inline void NetifeProbeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.response_text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.response_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetifeProbeResponse::~NetifeProbeResponse() {
  // @@protoc_insertion_point(destructor:NetifeMessage.NetifeProbeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetifeProbeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.response_text_.Destroy();
}

void NetifeProbeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetifeProbeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NetifeMessage.NetifeProbeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.response_text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetifeProbeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NetifeMessage.NetifeProbeResponse.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string response_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_response_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NetifeMessage.NetifeProbeResponse.response_text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetifeProbeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetifeMessage.NetifeProbeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetifeMessage.NetifeProbeResponse.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string response_text = 2;
  if (!this->_internal_response_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_text().data(), static_cast<int>(this->_internal_response_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NetifeMessage.NetifeProbeResponse.response_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_response_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetifeMessage.NetifeProbeResponse)
  return target;
}

size_t NetifeProbeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetifeMessage.NetifeProbeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string response_text = 2;
  if (!this->_internal_response_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetifeProbeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetifeProbeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetifeProbeResponse::GetClassData() const { return &_class_data_; }


void NetifeProbeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetifeProbeResponse*>(&to_msg);
  auto& from = static_cast<const NetifeProbeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NetifeMessage.NetifeProbeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_response_text().empty()) {
    _this->_internal_set_response_text(from._internal_response_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetifeProbeResponse::CopyFrom(const NetifeProbeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetifeMessage.NetifeProbeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetifeProbeResponse::IsInitialized() const {
  return true;
}

void NetifeProbeResponse::InternalSwap(NetifeProbeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_text_, lhs_arena,
      &other->_impl_.response_text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NetifeProbeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_probe_2eproto_getter, &descriptor_table_probe_2eproto_once,
      file_level_metadata_probe_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace NetifeMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetifeMessage::NetifeProbeRequest*
Arena::CreateMaybeMessage< ::NetifeMessage::NetifeProbeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetifeMessage::NetifeProbeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NetifeMessage::NetifeProbeResponse*
Arena::CreateMaybeMessage< ::NetifeMessage::NetifeProbeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetifeMessage::NetifeProbeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
