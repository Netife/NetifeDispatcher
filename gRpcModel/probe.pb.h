// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: probe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_probe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_probe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_probe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_probe_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_probe_2eproto;
namespace NetifeMessage {
class NetifeProbeRequest;
struct NetifeProbeRequestDefaultTypeInternal;
extern NetifeProbeRequestDefaultTypeInternal _NetifeProbeRequest_default_instance_;
class NetifeProbeResponse;
struct NetifeProbeResponseDefaultTypeInternal;
extern NetifeProbeResponseDefaultTypeInternal _NetifeProbeResponse_default_instance_;
}  // namespace NetifeMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::NetifeMessage::NetifeProbeRequest* Arena::CreateMaybeMessage<::NetifeMessage::NetifeProbeRequest>(Arena*);
template<> ::NetifeMessage::NetifeProbeResponse* Arena::CreateMaybeMessage<::NetifeMessage::NetifeProbeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NetifeMessage {

enum NetifeProbeRequest_RequestType : int {
  NetifeProbeRequest_RequestType_HTTP = 0,
  NetifeProbeRequest_RequestType_HTTPS = 1,
  NetifeProbeRequest_RequestType_WS = 2,
  NetifeProbeRequest_RequestType_WSS = 3,
  NetifeProbeRequest_RequestType_PING = 4,
  NetifeProbeRequest_RequestType_OTHER = 5,
  NetifeProbeRequest_RequestType_NetifeProbeRequest_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetifeProbeRequest_RequestType_NetifeProbeRequest_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetifeProbeRequest_RequestType_IsValid(int value);
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest_RequestType_RequestType_MIN = NetifeProbeRequest_RequestType_HTTP;
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest_RequestType_RequestType_MAX = NetifeProbeRequest_RequestType_OTHER;
constexpr int NetifeProbeRequest_RequestType_RequestType_ARRAYSIZE = NetifeProbeRequest_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetifeProbeRequest_RequestType_descriptor();
template<typename T>
inline const std::string& NetifeProbeRequest_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetifeProbeRequest_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetifeProbeRequest_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetifeProbeRequest_RequestType_descriptor(), enum_t_value);
}
inline bool NetifeProbeRequest_RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetifeProbeRequest_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetifeProbeRequest_RequestType>(
    NetifeProbeRequest_RequestType_descriptor(), name, value);
}
enum NetifeProbeRequest_ApplicationType : int {
  NetifeProbeRequest_ApplicationType_CLIENT = 0,
  NetifeProbeRequest_ApplicationType_SERVER = 1,
  NetifeProbeRequest_ApplicationType_NetifeProbeRequest_ApplicationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetifeProbeRequest_ApplicationType_NetifeProbeRequest_ApplicationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetifeProbeRequest_ApplicationType_IsValid(int value);
constexpr NetifeProbeRequest_ApplicationType NetifeProbeRequest_ApplicationType_ApplicationType_MIN = NetifeProbeRequest_ApplicationType_CLIENT;
constexpr NetifeProbeRequest_ApplicationType NetifeProbeRequest_ApplicationType_ApplicationType_MAX = NetifeProbeRequest_ApplicationType_SERVER;
constexpr int NetifeProbeRequest_ApplicationType_ApplicationType_ARRAYSIZE = NetifeProbeRequest_ApplicationType_ApplicationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetifeProbeRequest_ApplicationType_descriptor();
template<typename T>
inline const std::string& NetifeProbeRequest_ApplicationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetifeProbeRequest_ApplicationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetifeProbeRequest_ApplicationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetifeProbeRequest_ApplicationType_descriptor(), enum_t_value);
}
inline bool NetifeProbeRequest_ApplicationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetifeProbeRequest_ApplicationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetifeProbeRequest_ApplicationType>(
    NetifeProbeRequest_ApplicationType_descriptor(), name, value);
}
// ===================================================================

class NetifeProbeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeProbeRequest) */ {
 public:
  inline NetifeProbeRequest() : NetifeProbeRequest(nullptr) {}
  ~NetifeProbeRequest() override;
  explicit PROTOBUF_CONSTEXPR NetifeProbeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeProbeRequest(const NetifeProbeRequest& from);
  NetifeProbeRequest(NetifeProbeRequest&& from) noexcept
    : NetifeProbeRequest() {
    *this = ::std::move(from);
  }

  inline NetifeProbeRequest& operator=(const NetifeProbeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeProbeRequest& operator=(NetifeProbeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeProbeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeProbeRequest* internal_default_instance() {
    return reinterpret_cast<const NetifeProbeRequest*>(
               &_NetifeProbeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetifeProbeRequest& a, NetifeProbeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeProbeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeProbeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeProbeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeProbeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeProbeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeProbeRequest& from) {
    NetifeProbeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeProbeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeProbeRequest";
  }
  protected:
  explicit NetifeProbeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetifeProbeRequest_RequestType RequestType;
  static constexpr RequestType HTTP =
    NetifeProbeRequest_RequestType_HTTP;
  static constexpr RequestType HTTPS =
    NetifeProbeRequest_RequestType_HTTPS;
  static constexpr RequestType WS =
    NetifeProbeRequest_RequestType_WS;
  static constexpr RequestType WSS =
    NetifeProbeRequest_RequestType_WSS;
  static constexpr RequestType PING =
    NetifeProbeRequest_RequestType_PING;
  static constexpr RequestType OTHER =
    NetifeProbeRequest_RequestType_OTHER;
  static inline bool RequestType_IsValid(int value) {
    return NetifeProbeRequest_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    NetifeProbeRequest_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    NetifeProbeRequest_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    NetifeProbeRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return NetifeProbeRequest_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return NetifeProbeRequest_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestType* value) {
    return NetifeProbeRequest_RequestType_Parse(name, value);
  }

  typedef NetifeProbeRequest_ApplicationType ApplicationType;
  static constexpr ApplicationType CLIENT =
    NetifeProbeRequest_ApplicationType_CLIENT;
  static constexpr ApplicationType SERVER =
    NetifeProbeRequest_ApplicationType_SERVER;
  static inline bool ApplicationType_IsValid(int value) {
    return NetifeProbeRequest_ApplicationType_IsValid(value);
  }
  static constexpr ApplicationType ApplicationType_MIN =
    NetifeProbeRequest_ApplicationType_ApplicationType_MIN;
  static constexpr ApplicationType ApplicationType_MAX =
    NetifeProbeRequest_ApplicationType_ApplicationType_MAX;
  static constexpr int ApplicationType_ARRAYSIZE =
    NetifeProbeRequest_ApplicationType_ApplicationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ApplicationType_descriptor() {
    return NetifeProbeRequest_ApplicationType_descriptor();
  }
  template<typename T>
  static inline const std::string& ApplicationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ApplicationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ApplicationType_Name.");
    return NetifeProbeRequest_ApplicationType_Name(enum_t_value);
  }
  static inline bool ApplicationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ApplicationType* value) {
    return NetifeProbeRequest_ApplicationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kIpAddrFieldNumber = 2,
    kIpPortFieldNumber = 3,
    kRawTextFieldNumber = 5,
    kPidFieldNumber = 6,
    kWsIsRawTextFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string ip_addr = 2;
  void clear_ip_addr();
  const std::string& ip_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_addr();
  PROTOBUF_NODISCARD std::string* release_ip_addr();
  void set_allocated_ip_addr(std::string* ip_addr);
  private:
  const std::string& _internal_ip_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_addr(const std::string& value);
  std::string* _internal_mutable_ip_addr();
  public:

  // string ip_port = 3;
  void clear_ip_port();
  const std::string& ip_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_port();
  PROTOBUF_NODISCARD std::string* release_ip_port();
  void set_allocated_ip_port(std::string* ip_port);
  private:
  const std::string& _internal_ip_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_port(const std::string& value);
  std::string* _internal_mutable_ip_port();
  public:

  // string raw_text = 5;
  void clear_raw_text();
  const std::string& raw_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_text();
  PROTOBUF_NODISCARD std::string* release_raw_text();
  void set_allocated_raw_text(std::string* raw_text);
  private:
  const std::string& _internal_raw_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_text(const std::string& value);
  std::string* _internal_mutable_raw_text();
  public:

  // optional string pid = 6;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pid();
  PROTOBUF_NODISCARD std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional bool ws_is_raw_text = 4;
  bool has_ws_is_raw_text() const;
  private:
  bool _internal_has_ws_is_raw_text() const;
  public:
  void clear_ws_is_raw_text();
  bool ws_is_raw_text() const;
  void set_ws_is_raw_text(bool value);
  private:
  bool _internal_ws_is_raw_text() const;
  void _internal_set_ws_is_raw_text(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeProbeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
    bool ws_is_raw_text_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_probe_2eproto;
};
// -------------------------------------------------------------------

class NetifeProbeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeProbeResponse) */ {
 public:
  inline NetifeProbeResponse() : NetifeProbeResponse(nullptr) {}
  ~NetifeProbeResponse() override;
  explicit PROTOBUF_CONSTEXPR NetifeProbeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeProbeResponse(const NetifeProbeResponse& from);
  NetifeProbeResponse(NetifeProbeResponse&& from) noexcept
    : NetifeProbeResponse() {
    *this = ::std::move(from);
  }

  inline NetifeProbeResponse& operator=(const NetifeProbeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeProbeResponse& operator=(NetifeProbeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeProbeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeProbeResponse* internal_default_instance() {
    return reinterpret_cast<const NetifeProbeResponse*>(
               &_NetifeProbeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetifeProbeResponse& a, NetifeProbeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeProbeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeProbeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeProbeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeProbeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeProbeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeProbeResponse& from) {
    NetifeProbeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeProbeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeProbeResponse";
  }
  protected:
  explicit NetifeProbeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kResponseTextFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string response_text = 2;
  void clear_response_text();
  const std::string& response_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response_text();
  PROTOBUF_NODISCARD std::string* release_response_text();
  void set_allocated_response_text(std::string* response_text);
  private:
  const std::string& _internal_response_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_text(const std::string& value);
  std::string* _internal_mutable_response_text();
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeProbeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_probe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetifeProbeRequest

// string uuid = 1;
inline void NetifeProbeRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::uuid() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.uuid)
}
inline std::string* NetifeProbeRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.uuid)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void NetifeProbeRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void NetifeProbeRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.uuid)
}

// string ip_addr = 2;
inline void NetifeProbeRequest::clear_ip_addr() {
  _impl_.ip_addr_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::ip_addr() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.ip_addr)
  return _internal_ip_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_ip_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.ip_addr)
}
inline std::string* NetifeProbeRequest::mutable_ip_addr() {
  std::string* _s = _internal_mutable_ip_addr();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.ip_addr)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_ip_addr() const {
  return _impl_.ip_addr_.Get();
}
inline void NetifeProbeRequest::_internal_set_ip_addr(const std::string& value) {
  
  _impl_.ip_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_ip_addr() {
  
  return _impl_.ip_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_ip_addr() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.ip_addr)
  return _impl_.ip_addr_.Release();
}
inline void NetifeProbeRequest::set_allocated_ip_addr(std::string* ip_addr) {
  if (ip_addr != nullptr) {
    
  } else {
    
  }
  _impl_.ip_addr_.SetAllocated(ip_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_addr_.IsDefault()) {
    _impl_.ip_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.ip_addr)
}

// string ip_port = 3;
inline void NetifeProbeRequest::clear_ip_port() {
  _impl_.ip_port_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::ip_port() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.ip_port)
  return _internal_ip_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_ip_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.ip_port)
}
inline std::string* NetifeProbeRequest::mutable_ip_port() {
  std::string* _s = _internal_mutable_ip_port();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.ip_port)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_ip_port() const {
  return _impl_.ip_port_.Get();
}
inline void NetifeProbeRequest::_internal_set_ip_port(const std::string& value) {
  
  _impl_.ip_port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_ip_port() {
  
  return _impl_.ip_port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_ip_port() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.ip_port)
  return _impl_.ip_port_.Release();
}
inline void NetifeProbeRequest::set_allocated_ip_port(std::string* ip_port) {
  if (ip_port != nullptr) {
    
  } else {
    
  }
  _impl_.ip_port_.SetAllocated(ip_port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_port_.IsDefault()) {
    _impl_.ip_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.ip_port)
}

// optional bool ws_is_raw_text = 4;
inline bool NetifeProbeRequest::_internal_has_ws_is_raw_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetifeProbeRequest::has_ws_is_raw_text() const {
  return _internal_has_ws_is_raw_text();
}
inline void NetifeProbeRequest::clear_ws_is_raw_text() {
  _impl_.ws_is_raw_text_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool NetifeProbeRequest::_internal_ws_is_raw_text() const {
  return _impl_.ws_is_raw_text_;
}
inline bool NetifeProbeRequest::ws_is_raw_text() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.ws_is_raw_text)
  return _internal_ws_is_raw_text();
}
inline void NetifeProbeRequest::_internal_set_ws_is_raw_text(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ws_is_raw_text_ = value;
}
inline void NetifeProbeRequest::set_ws_is_raw_text(bool value) {
  _internal_set_ws_is_raw_text(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.ws_is_raw_text)
}

// string raw_text = 5;
inline void NetifeProbeRequest::clear_raw_text() {
  _impl_.raw_text_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::raw_text() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.raw_text)
  return _internal_raw_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_raw_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.raw_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.raw_text)
}
inline std::string* NetifeProbeRequest::mutable_raw_text() {
  std::string* _s = _internal_mutable_raw_text();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.raw_text)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_raw_text() const {
  return _impl_.raw_text_.Get();
}
inline void NetifeProbeRequest::_internal_set_raw_text(const std::string& value) {
  
  _impl_.raw_text_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_raw_text() {
  
  return _impl_.raw_text_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_raw_text() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.raw_text)
  return _impl_.raw_text_.Release();
}
inline void NetifeProbeRequest::set_allocated_raw_text(std::string* raw_text) {
  if (raw_text != nullptr) {
    
  } else {
    
  }
  _impl_.raw_text_.SetAllocated(raw_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_text_.IsDefault()) {
    _impl_.raw_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.raw_text)
}

// optional string pid = 6;
inline bool NetifeProbeRequest::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetifeProbeRequest::has_pid() const {
  return _internal_has_pid();
}
inline void NetifeProbeRequest::clear_pid() {
  _impl_.pid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetifeProbeRequest::pid() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.pid)
  return _internal_pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_pid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.pid)
}
inline std::string* NetifeProbeRequest::mutable_pid() {
  std::string* _s = _internal_mutable_pid();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.pid)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_pid() const {
  return _impl_.pid_.Get();
}
inline void NetifeProbeRequest::_internal_set_pid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pid_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_pid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pid_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_pid() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pid_.IsDefault()) {
    _impl_.pid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifeProbeRequest::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pid_.SetAllocated(pid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pid_.IsDefault()) {
    _impl_.pid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.pid)
}

// -------------------------------------------------------------------

// NetifeProbeResponse

// string uuid = 1;
inline void NetifeProbeResponse::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& NetifeProbeResponse::uuid() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeResponse.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeResponse::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeResponse.uuid)
}
inline std::string* NetifeProbeResponse::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeResponse.uuid)
  return _s;
}
inline const std::string& NetifeProbeResponse::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void NetifeProbeResponse::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeResponse.uuid)
  return _impl_.uuid_.Release();
}
inline void NetifeProbeResponse::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeResponse.uuid)
}

// string response_text = 2;
inline void NetifeProbeResponse::clear_response_text() {
  _impl_.response_text_.ClearToEmpty();
}
inline const std::string& NetifeProbeResponse::response_text() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeResponse.response_text)
  return _internal_response_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeResponse::set_response_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.response_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeResponse.response_text)
}
inline std::string* NetifeProbeResponse::mutable_response_text() {
  std::string* _s = _internal_mutable_response_text();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeResponse.response_text)
  return _s;
}
inline const std::string& NetifeProbeResponse::_internal_response_text() const {
  return _impl_.response_text_.Get();
}
inline void NetifeProbeResponse::_internal_set_response_text(const std::string& value) {
  
  _impl_.response_text_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::_internal_mutable_response_text() {
  
  return _impl_.response_text_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::release_response_text() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeResponse.response_text)
  return _impl_.response_text_.Release();
}
inline void NetifeProbeResponse::set_allocated_response_text(std::string* response_text) {
  if (response_text != nullptr) {
    
  } else {
    
  }
  _impl_.response_text_.SetAllocated(response_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_text_.IsDefault()) {
    _impl_.response_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeResponse.response_text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetifeMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NetifeMessage::NetifeProbeRequest_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetifeMessage::NetifeProbeRequest_RequestType>() {
  return ::NetifeMessage::NetifeProbeRequest_RequestType_descriptor();
}
template <> struct is_proto_enum< ::NetifeMessage::NetifeProbeRequest_ApplicationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetifeMessage::NetifeProbeRequest_ApplicationType>() {
  return ::NetifeMessage::NetifeProbeRequest_ApplicationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_probe_2eproto
