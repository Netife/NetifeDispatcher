// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetifeMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NetifeMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NetifeMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NetifeMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NetifeMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NetifeMessage_2eproto;
namespace NetifeMessage {
class NetifeComposerRequest;
struct NetifeComposerRequestDefaultTypeInternal;
extern NetifeComposerRequestDefaultTypeInternal _NetifeComposerRequest_default_instance_;
class NetifeComposerResponse;
struct NetifeComposerResponseDefaultTypeInternal;
extern NetifeComposerResponseDefaultTypeInternal _NetifeComposerResponse_default_instance_;
class NetifePluginCommandRequest;
struct NetifePluginCommandRequestDefaultTypeInternal;
extern NetifePluginCommandRequestDefaultTypeInternal _NetifePluginCommandRequest_default_instance_;
class NetifePluginCommandResponse;
struct NetifePluginCommandResponseDefaultTypeInternal;
extern NetifePluginCommandResponseDefaultTypeInternal _NetifePluginCommandResponse_default_instance_;
class NetifeProbeRequest;
struct NetifeProbeRequestDefaultTypeInternal;
extern NetifeProbeRequestDefaultTypeInternal _NetifeProbeRequest_default_instance_;
class NetifeProbeResponse;
struct NetifeProbeResponseDefaultTypeInternal;
extern NetifeProbeResponseDefaultTypeInternal _NetifeProbeResponse_default_instance_;
class NetifeRegisterRequest;
struct NetifeRegisterRequestDefaultTypeInternal;
extern NetifeRegisterRequestDefaultTypeInternal _NetifeRegisterRequest_default_instance_;
class NetifeRegisterResponse;
struct NetifeRegisterResponseDefaultTypeInternal;
extern NetifeRegisterResponseDefaultTypeInternal _NetifeRegisterResponse_default_instance_;
class NetifeScriptCommandRequest;
struct NetifeScriptCommandRequestDefaultTypeInternal;
extern NetifeScriptCommandRequestDefaultTypeInternal _NetifeScriptCommandRequest_default_instance_;
class NetifeScriptCommandRequest_ParamsEntry_DoNotUse;
struct NetifeScriptCommandRequest_ParamsEntry_DoNotUseDefaultTypeInternal;
extern NetifeScriptCommandRequest_ParamsEntry_DoNotUseDefaultTypeInternal _NetifeScriptCommandRequest_ParamsEntry_DoNotUse_default_instance_;
class NetifeScriptCommandResponse;
struct NetifeScriptCommandResponseDefaultTypeInternal;
extern NetifeScriptCommandResponseDefaultTypeInternal _NetifeScriptCommandResponse_default_instance_;
class NetifeScriptDebuggerRequest;
struct NetifeScriptDebuggerRequestDefaultTypeInternal;
extern NetifeScriptDebuggerRequestDefaultTypeInternal _NetifeScriptDebuggerRequest_default_instance_;
class NetifeScriptDebuggerResponse;
struct NetifeScriptDebuggerResponseDefaultTypeInternal;
extern NetifeScriptDebuggerResponseDefaultTypeInternal _NetifeScriptDebuggerResponse_default_instance_;
class NetifeScriptRegisterRequest;
struct NetifeScriptRegisterRequestDefaultTypeInternal;
extern NetifeScriptRegisterRequestDefaultTypeInternal _NetifeScriptRegisterRequest_default_instance_;
class NetifeScriptRegisterResponse;
struct NetifeScriptRegisterResponseDefaultTypeInternal;
extern NetifeScriptRegisterResponseDefaultTypeInternal _NetifeScriptRegisterResponse_default_instance_;
}  // namespace NetifeMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::NetifeMessage::NetifeComposerRequest* Arena::CreateMaybeMessage<::NetifeMessage::NetifeComposerRequest>(Arena*);
template<> ::NetifeMessage::NetifeComposerResponse* Arena::CreateMaybeMessage<::NetifeMessage::NetifeComposerResponse>(Arena*);
template<> ::NetifeMessage::NetifePluginCommandRequest* Arena::CreateMaybeMessage<::NetifeMessage::NetifePluginCommandRequest>(Arena*);
template<> ::NetifeMessage::NetifePluginCommandResponse* Arena::CreateMaybeMessage<::NetifeMessage::NetifePluginCommandResponse>(Arena*);
template<> ::NetifeMessage::NetifeProbeRequest* Arena::CreateMaybeMessage<::NetifeMessage::NetifeProbeRequest>(Arena*);
template<> ::NetifeMessage::NetifeProbeResponse* Arena::CreateMaybeMessage<::NetifeMessage::NetifeProbeResponse>(Arena*);
template<> ::NetifeMessage::NetifeRegisterRequest* Arena::CreateMaybeMessage<::NetifeMessage::NetifeRegisterRequest>(Arena*);
template<> ::NetifeMessage::NetifeRegisterResponse* Arena::CreateMaybeMessage<::NetifeMessage::NetifeRegisterResponse>(Arena*);
template<> ::NetifeMessage::NetifeScriptCommandRequest* Arena::CreateMaybeMessage<::NetifeMessage::NetifeScriptCommandRequest>(Arena*);
template<> ::NetifeMessage::NetifeScriptCommandRequest_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::NetifeMessage::NetifeScriptCommandRequest_ParamsEntry_DoNotUse>(Arena*);
template<> ::NetifeMessage::NetifeScriptCommandResponse* Arena::CreateMaybeMessage<::NetifeMessage::NetifeScriptCommandResponse>(Arena*);
template<> ::NetifeMessage::NetifeScriptDebuggerRequest* Arena::CreateMaybeMessage<::NetifeMessage::NetifeScriptDebuggerRequest>(Arena*);
template<> ::NetifeMessage::NetifeScriptDebuggerResponse* Arena::CreateMaybeMessage<::NetifeMessage::NetifeScriptDebuggerResponse>(Arena*);
template<> ::NetifeMessage::NetifeScriptRegisterRequest* Arena::CreateMaybeMessage<::NetifeMessage::NetifeScriptRegisterRequest>(Arena*);
template<> ::NetifeMessage::NetifeScriptRegisterResponse* Arena::CreateMaybeMessage<::NetifeMessage::NetifeScriptRegisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NetifeMessage {

enum NetifeProbeRequest_RequestType : int {
  NetifeProbeRequest_RequestType_HTTP = 0,
  NetifeProbeRequest_RequestType_HTTPS = 1,
  NetifeProbeRequest_RequestType_WS = 2,
  NetifeProbeRequest_RequestType_WSS = 3,
  NetifeProbeRequest_RequestType_PING = 4,
  NetifeProbeRequest_RequestType_OTHER = 5,
  NetifeProbeRequest_RequestType_NetifeProbeRequest_RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetifeProbeRequest_RequestType_NetifeProbeRequest_RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetifeProbeRequest_RequestType_IsValid(int value);
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest_RequestType_RequestType_MIN = NetifeProbeRequest_RequestType_HTTP;
constexpr NetifeProbeRequest_RequestType NetifeProbeRequest_RequestType_RequestType_MAX = NetifeProbeRequest_RequestType_OTHER;
constexpr int NetifeProbeRequest_RequestType_RequestType_ARRAYSIZE = NetifeProbeRequest_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetifeProbeRequest_RequestType_descriptor();
template<typename T>
inline const std::string& NetifeProbeRequest_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetifeProbeRequest_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetifeProbeRequest_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetifeProbeRequest_RequestType_descriptor(), enum_t_value);
}
inline bool NetifeProbeRequest_RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetifeProbeRequest_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetifeProbeRequest_RequestType>(
    NetifeProbeRequest_RequestType_descriptor(), name, value);
}
enum NetifeProbeRequest_ApplicationType : int {
  NetifeProbeRequest_ApplicationType_CLIENT = 0,
  NetifeProbeRequest_ApplicationType_SERVER = 1,
  NetifeProbeRequest_ApplicationType_NetifeProbeRequest_ApplicationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetifeProbeRequest_ApplicationType_NetifeProbeRequest_ApplicationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetifeProbeRequest_ApplicationType_IsValid(int value);
constexpr NetifeProbeRequest_ApplicationType NetifeProbeRequest_ApplicationType_ApplicationType_MIN = NetifeProbeRequest_ApplicationType_CLIENT;
constexpr NetifeProbeRequest_ApplicationType NetifeProbeRequest_ApplicationType_ApplicationType_MAX = NetifeProbeRequest_ApplicationType_SERVER;
constexpr int NetifeProbeRequest_ApplicationType_ApplicationType_ARRAYSIZE = NetifeProbeRequest_ApplicationType_ApplicationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetifeProbeRequest_ApplicationType_descriptor();
template<typename T>
inline const std::string& NetifeProbeRequest_ApplicationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetifeProbeRequest_ApplicationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetifeProbeRequest_ApplicationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetifeProbeRequest_ApplicationType_descriptor(), enum_t_value);
}
inline bool NetifeProbeRequest_ApplicationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetifeProbeRequest_ApplicationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetifeProbeRequest_ApplicationType>(
    NetifeProbeRequest_ApplicationType_descriptor(), name, value);
}
enum NetifeProbeRequest_Protocol : int {
  NetifeProbeRequest_Protocol_TCP = 0,
  NetifeProbeRequest_Protocol_UDP = 1,
  NetifeProbeRequest_Protocol_NetifeProbeRequest_Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetifeProbeRequest_Protocol_NetifeProbeRequest_Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetifeProbeRequest_Protocol_IsValid(int value);
constexpr NetifeProbeRequest_Protocol NetifeProbeRequest_Protocol_Protocol_MIN = NetifeProbeRequest_Protocol_TCP;
constexpr NetifeProbeRequest_Protocol NetifeProbeRequest_Protocol_Protocol_MAX = NetifeProbeRequest_Protocol_UDP;
constexpr int NetifeProbeRequest_Protocol_Protocol_ARRAYSIZE = NetifeProbeRequest_Protocol_Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetifeProbeRequest_Protocol_descriptor();
template<typename T>
inline const std::string& NetifeProbeRequest_Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetifeProbeRequest_Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetifeProbeRequest_Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetifeProbeRequest_Protocol_descriptor(), enum_t_value);
}
inline bool NetifeProbeRequest_Protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetifeProbeRequest_Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetifeProbeRequest_Protocol>(
    NetifeProbeRequest_Protocol_descriptor(), name, value);
}
enum NetifeComposerRequest_ProtocolType : int {
  NetifeComposerRequest_ProtocolType_HTTP = 0,
  NetifeComposerRequest_ProtocolType_HTTPS = 1,
  NetifeComposerRequest_ProtocolType_WS = 2,
  NetifeComposerRequest_ProtocolType_WSS = 3,
  NetifeComposerRequest_ProtocolType_NetifeComposerRequest_ProtocolType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NetifeComposerRequest_ProtocolType_NetifeComposerRequest_ProtocolType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NetifeComposerRequest_ProtocolType_IsValid(int value);
constexpr NetifeComposerRequest_ProtocolType NetifeComposerRequest_ProtocolType_ProtocolType_MIN = NetifeComposerRequest_ProtocolType_HTTP;
constexpr NetifeComposerRequest_ProtocolType NetifeComposerRequest_ProtocolType_ProtocolType_MAX = NetifeComposerRequest_ProtocolType_WSS;
constexpr int NetifeComposerRequest_ProtocolType_ProtocolType_ARRAYSIZE = NetifeComposerRequest_ProtocolType_ProtocolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetifeComposerRequest_ProtocolType_descriptor();
template<typename T>
inline const std::string& NetifeComposerRequest_ProtocolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetifeComposerRequest_ProtocolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetifeComposerRequest_ProtocolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetifeComposerRequest_ProtocolType_descriptor(), enum_t_value);
}
inline bool NetifeComposerRequest_ProtocolType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetifeComposerRequest_ProtocolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetifeComposerRequest_ProtocolType>(
    NetifeComposerRequest_ProtocolType_descriptor(), name, value);
}
// ===================================================================

class NetifeProbeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeProbeRequest) */ {
 public:
  inline NetifeProbeRequest() : NetifeProbeRequest(nullptr) {}
  ~NetifeProbeRequest() override;
  explicit PROTOBUF_CONSTEXPR NetifeProbeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeProbeRequest(const NetifeProbeRequest& from);
  NetifeProbeRequest(NetifeProbeRequest&& from) noexcept
    : NetifeProbeRequest() {
    *this = ::std::move(from);
  }

  inline NetifeProbeRequest& operator=(const NetifeProbeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeProbeRequest& operator=(NetifeProbeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeProbeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeProbeRequest* internal_default_instance() {
    return reinterpret_cast<const NetifeProbeRequest*>(
               &_NetifeProbeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetifeProbeRequest& a, NetifeProbeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeProbeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeProbeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeProbeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeProbeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeProbeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeProbeRequest& from) {
    NetifeProbeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeProbeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeProbeRequest";
  }
  protected:
  explicit NetifeProbeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetifeProbeRequest_RequestType RequestType;
  static constexpr RequestType HTTP =
    NetifeProbeRequest_RequestType_HTTP;
  static constexpr RequestType HTTPS =
    NetifeProbeRequest_RequestType_HTTPS;
  static constexpr RequestType WS =
    NetifeProbeRequest_RequestType_WS;
  static constexpr RequestType WSS =
    NetifeProbeRequest_RequestType_WSS;
  static constexpr RequestType PING =
    NetifeProbeRequest_RequestType_PING;
  static constexpr RequestType OTHER =
    NetifeProbeRequest_RequestType_OTHER;
  static inline bool RequestType_IsValid(int value) {
    return NetifeProbeRequest_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    NetifeProbeRequest_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    NetifeProbeRequest_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    NetifeProbeRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return NetifeProbeRequest_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return NetifeProbeRequest_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestType* value) {
    return NetifeProbeRequest_RequestType_Parse(name, value);
  }

  typedef NetifeProbeRequest_ApplicationType ApplicationType;
  static constexpr ApplicationType CLIENT =
    NetifeProbeRequest_ApplicationType_CLIENT;
  static constexpr ApplicationType SERVER =
    NetifeProbeRequest_ApplicationType_SERVER;
  static inline bool ApplicationType_IsValid(int value) {
    return NetifeProbeRequest_ApplicationType_IsValid(value);
  }
  static constexpr ApplicationType ApplicationType_MIN =
    NetifeProbeRequest_ApplicationType_ApplicationType_MIN;
  static constexpr ApplicationType ApplicationType_MAX =
    NetifeProbeRequest_ApplicationType_ApplicationType_MAX;
  static constexpr int ApplicationType_ARRAYSIZE =
    NetifeProbeRequest_ApplicationType_ApplicationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ApplicationType_descriptor() {
    return NetifeProbeRequest_ApplicationType_descriptor();
  }
  template<typename T>
  static inline const std::string& ApplicationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ApplicationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ApplicationType_Name.");
    return NetifeProbeRequest_ApplicationType_Name(enum_t_value);
  }
  static inline bool ApplicationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ApplicationType* value) {
    return NetifeProbeRequest_ApplicationType_Parse(name, value);
  }

  typedef NetifeProbeRequest_Protocol Protocol;
  static constexpr Protocol TCP =
    NetifeProbeRequest_Protocol_TCP;
  static constexpr Protocol UDP =
    NetifeProbeRequest_Protocol_UDP;
  static inline bool Protocol_IsValid(int value) {
    return NetifeProbeRequest_Protocol_IsValid(value);
  }
  static constexpr Protocol Protocol_MIN =
    NetifeProbeRequest_Protocol_Protocol_MIN;
  static constexpr Protocol Protocol_MAX =
    NetifeProbeRequest_Protocol_Protocol_MAX;
  static constexpr int Protocol_ARRAYSIZE =
    NetifeProbeRequest_Protocol_Protocol_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Protocol_descriptor() {
    return NetifeProbeRequest_Protocol_descriptor();
  }
  template<typename T>
  static inline const std::string& Protocol_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Protocol>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Protocol_Name.");
    return NetifeProbeRequest_Protocol_Name(enum_t_value);
  }
  static inline bool Protocol_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Protocol* value) {
    return NetifeProbeRequest_Protocol_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kDstIpAddrFieldNumber = 5,
    kDstIpPortFieldNumber = 6,
    kSrcIpAddrFieldNumber = 7,
    kSrcIpPortFieldNumber = 8,
    kRawTextFieldNumber = 11,
    kPidFieldNumber = 12,
    kProcessNameFieldNumber = 13,
    kRequestTypeFieldNumber = 2,
    kApplicationTypeFieldNumber = 3,
    kProtocolFieldNumber = 4,
    kIsRawTextFieldNumber = 9,
    kUuidSubFieldNumber = 10,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string dst_ip_addr = 5;
  void clear_dst_ip_addr();
  const std::string& dst_ip_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst_ip_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst_ip_addr();
  PROTOBUF_NODISCARD std::string* release_dst_ip_addr();
  void set_allocated_dst_ip_addr(std::string* dst_ip_addr);
  private:
  const std::string& _internal_dst_ip_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_ip_addr(const std::string& value);
  std::string* _internal_mutable_dst_ip_addr();
  public:

  // string dst_ip_port = 6;
  void clear_dst_ip_port();
  const std::string& dst_ip_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst_ip_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst_ip_port();
  PROTOBUF_NODISCARD std::string* release_dst_ip_port();
  void set_allocated_dst_ip_port(std::string* dst_ip_port);
  private:
  const std::string& _internal_dst_ip_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_ip_port(const std::string& value);
  std::string* _internal_mutable_dst_ip_port();
  public:

  // string src_ip_addr = 7;
  void clear_src_ip_addr();
  const std::string& src_ip_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_ip_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_ip_addr();
  PROTOBUF_NODISCARD std::string* release_src_ip_addr();
  void set_allocated_src_ip_addr(std::string* src_ip_addr);
  private:
  const std::string& _internal_src_ip_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_ip_addr(const std::string& value);
  std::string* _internal_mutable_src_ip_addr();
  public:

  // string src_ip_port = 8;
  void clear_src_ip_port();
  const std::string& src_ip_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_ip_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_ip_port();
  PROTOBUF_NODISCARD std::string* release_src_ip_port();
  void set_allocated_src_ip_port(std::string* src_ip_port);
  private:
  const std::string& _internal_src_ip_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_ip_port(const std::string& value);
  std::string* _internal_mutable_src_ip_port();
  public:

  // string raw_text = 11;
  void clear_raw_text();
  const std::string& raw_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_text();
  PROTOBUF_NODISCARD std::string* release_raw_text();
  void set_allocated_raw_text(std::string* raw_text);
  private:
  const std::string& _internal_raw_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_text(const std::string& value);
  std::string* _internal_mutable_raw_text();
  public:

  // optional string pid = 12;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pid();
  PROTOBUF_NODISCARD std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional string process_name = 13;
  bool has_process_name() const;
  private:
  bool _internal_has_process_name() const;
  public:
  void clear_process_name();
  const std::string& process_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_name();
  PROTOBUF_NODISCARD std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // .NetifeMessage.NetifeProbeRequest.RequestType request_type = 2;
  void clear_request_type();
  ::NetifeMessage::NetifeProbeRequest_RequestType request_type() const;
  void set_request_type(::NetifeMessage::NetifeProbeRequest_RequestType value);
  private:
  ::NetifeMessage::NetifeProbeRequest_RequestType _internal_request_type() const;
  void _internal_set_request_type(::NetifeMessage::NetifeProbeRequest_RequestType value);
  public:

  // .NetifeMessage.NetifeProbeRequest.ApplicationType application_type = 3;
  void clear_application_type();
  ::NetifeMessage::NetifeProbeRequest_ApplicationType application_type() const;
  void set_application_type(::NetifeMessage::NetifeProbeRequest_ApplicationType value);
  private:
  ::NetifeMessage::NetifeProbeRequest_ApplicationType _internal_application_type() const;
  void _internal_set_application_type(::NetifeMessage::NetifeProbeRequest_ApplicationType value);
  public:

  // .NetifeMessage.NetifeProbeRequest.Protocol protocol = 4;
  void clear_protocol();
  ::NetifeMessage::NetifeProbeRequest_Protocol protocol() const;
  void set_protocol(::NetifeMessage::NetifeProbeRequest_Protocol value);
  private:
  ::NetifeMessage::NetifeProbeRequest_Protocol _internal_protocol() const;
  void _internal_set_protocol(::NetifeMessage::NetifeProbeRequest_Protocol value);
  public:

  // bool is_raw_text = 9;
  void clear_is_raw_text();
  bool is_raw_text() const;
  void set_is_raw_text(bool value);
  private:
  bool _internal_is_raw_text() const;
  void _internal_set_is_raw_text(bool value);
  public:

  // optional int32 uuid_sub = 10;
  bool has_uuid_sub() const;
  private:
  bool _internal_has_uuid_sub() const;
  public:
  void clear_uuid_sub();
  int32_t uuid_sub() const;
  void set_uuid_sub(int32_t value);
  private:
  int32_t _internal_uuid_sub() const;
  void _internal_set_uuid_sub(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeProbeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ip_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ip_port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_ip_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_ip_port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
    int request_type_;
    int application_type_;
    int protocol_;
    bool is_raw_text_;
    int32_t uuid_sub_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeProbeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeProbeResponse) */ {
 public:
  inline NetifeProbeResponse() : NetifeProbeResponse(nullptr) {}
  ~NetifeProbeResponse() override;
  explicit PROTOBUF_CONSTEXPR NetifeProbeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeProbeResponse(const NetifeProbeResponse& from);
  NetifeProbeResponse(NetifeProbeResponse&& from) noexcept
    : NetifeProbeResponse() {
    *this = ::std::move(from);
  }

  inline NetifeProbeResponse& operator=(const NetifeProbeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeProbeResponse& operator=(NetifeProbeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeProbeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeProbeResponse* internal_default_instance() {
    return reinterpret_cast<const NetifeProbeResponse*>(
               &_NetifeProbeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetifeProbeResponse& a, NetifeProbeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeProbeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeProbeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeProbeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeProbeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeProbeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeProbeResponse& from) {
    NetifeProbeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeProbeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeProbeResponse";
  }
  protected:
  explicit NetifeProbeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kDstIpAddrFieldNumber = 2,
    kDstIpPortFieldNumber = 3,
    kResponseTextFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string dst_ip_addr = 2;
  void clear_dst_ip_addr();
  const std::string& dst_ip_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst_ip_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst_ip_addr();
  PROTOBUF_NODISCARD std::string* release_dst_ip_addr();
  void set_allocated_dst_ip_addr(std::string* dst_ip_addr);
  private:
  const std::string& _internal_dst_ip_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_ip_addr(const std::string& value);
  std::string* _internal_mutable_dst_ip_addr();
  public:

  // string dst_ip_port = 3;
  void clear_dst_ip_port();
  const std::string& dst_ip_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst_ip_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst_ip_port();
  PROTOBUF_NODISCARD std::string* release_dst_ip_port();
  void set_allocated_dst_ip_port(std::string* dst_ip_port);
  private:
  const std::string& _internal_dst_ip_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_ip_port(const std::string& value);
  std::string* _internal_mutable_dst_ip_port();
  public:

  // string response_text = 4;
  void clear_response_text();
  const std::string& response_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response_text();
  PROTOBUF_NODISCARD std::string* release_response_text();
  void set_allocated_response_text(std::string* response_text);
  private:
  const std::string& _internal_response_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_text(const std::string& value);
  std::string* _internal_mutable_response_text();
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeProbeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ip_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ip_port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeRegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeRegisterRequest) */ {
 public:
  inline NetifeRegisterRequest() : NetifeRegisterRequest(nullptr) {}
  ~NetifeRegisterRequest() override;
  explicit PROTOBUF_CONSTEXPR NetifeRegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeRegisterRequest(const NetifeRegisterRequest& from);
  NetifeRegisterRequest(NetifeRegisterRequest&& from) noexcept
    : NetifeRegisterRequest() {
    *this = ::std::move(from);
  }

  inline NetifeRegisterRequest& operator=(const NetifeRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeRegisterRequest& operator=(NetifeRegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeRegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const NetifeRegisterRequest*>(
               &_NetifeRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetifeRegisterRequest& a, NetifeRegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeRegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeRegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeRegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeRegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeRegisterRequest& from) {
    NetifeRegisterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeRegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeRegisterRequest";
  }
  protected:
  explicit NetifeRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcHostFieldNumber = 1,
    kGrpcPortFieldNumber = 2,
  };
  // string grpc_host = 1;
  void clear_grpc_host();
  const std::string& grpc_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grpc_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grpc_host();
  PROTOBUF_NODISCARD std::string* release_grpc_host();
  void set_allocated_grpc_host(std::string* grpc_host);
  private:
  const std::string& _internal_grpc_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grpc_host(const std::string& value);
  std::string* _internal_mutable_grpc_host();
  public:

  // string grpc_port = 2;
  void clear_grpc_port();
  const std::string& grpc_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grpc_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grpc_port();
  PROTOBUF_NODISCARD std::string* release_grpc_port();
  void set_allocated_grpc_port(std::string* grpc_port);
  private:
  const std::string& _internal_grpc_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grpc_port(const std::string& value);
  std::string* _internal_mutable_grpc_port();
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeRegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grpc_host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grpc_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeRegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeRegisterResponse) */ {
 public:
  inline NetifeRegisterResponse() : NetifeRegisterResponse(nullptr) {}
  ~NetifeRegisterResponse() override;
  explicit PROTOBUF_CONSTEXPR NetifeRegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeRegisterResponse(const NetifeRegisterResponse& from);
  NetifeRegisterResponse(NetifeRegisterResponse&& from) noexcept
    : NetifeRegisterResponse() {
    *this = ::std::move(from);
  }

  inline NetifeRegisterResponse& operator=(const NetifeRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeRegisterResponse& operator=(NetifeRegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeRegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const NetifeRegisterResponse*>(
               &_NetifeRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetifeRegisterResponse& a, NetifeRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeRegisterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeRegisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeRegisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeRegisterResponse& from) {
    NetifeRegisterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeRegisterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeRegisterResponse";
  }
  protected:
  explicit NetifeRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeComposerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeComposerRequest) */ {
 public:
  inline NetifeComposerRequest() : NetifeComposerRequest(nullptr) {}
  ~NetifeComposerRequest() override;
  explicit PROTOBUF_CONSTEXPR NetifeComposerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeComposerRequest(const NetifeComposerRequest& from);
  NetifeComposerRequest(NetifeComposerRequest&& from) noexcept
    : NetifeComposerRequest() {
    *this = ::std::move(from);
  }

  inline NetifeComposerRequest& operator=(const NetifeComposerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeComposerRequest& operator=(NetifeComposerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeComposerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeComposerRequest* internal_default_instance() {
    return reinterpret_cast<const NetifeComposerRequest*>(
               &_NetifeComposerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NetifeComposerRequest& a, NetifeComposerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeComposerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeComposerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeComposerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeComposerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeComposerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeComposerRequest& from) {
    NetifeComposerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeComposerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeComposerRequest";
  }
  protected:
  explicit NetifeComposerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetifeComposerRequest_ProtocolType ProtocolType;
  static constexpr ProtocolType HTTP =
    NetifeComposerRequest_ProtocolType_HTTP;
  static constexpr ProtocolType HTTPS =
    NetifeComposerRequest_ProtocolType_HTTPS;
  static constexpr ProtocolType WS =
    NetifeComposerRequest_ProtocolType_WS;
  static constexpr ProtocolType WSS =
    NetifeComposerRequest_ProtocolType_WSS;
  static inline bool ProtocolType_IsValid(int value) {
    return NetifeComposerRequest_ProtocolType_IsValid(value);
  }
  static constexpr ProtocolType ProtocolType_MIN =
    NetifeComposerRequest_ProtocolType_ProtocolType_MIN;
  static constexpr ProtocolType ProtocolType_MAX =
    NetifeComposerRequest_ProtocolType_ProtocolType_MAX;
  static constexpr int ProtocolType_ARRAYSIZE =
    NetifeComposerRequest_ProtocolType_ProtocolType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProtocolType_descriptor() {
    return NetifeComposerRequest_ProtocolType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProtocolType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProtocolType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProtocolType_Name.");
    return NetifeComposerRequest_ProtocolType_Name(enum_t_value);
  }
  static inline bool ProtocolType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProtocolType* value) {
    return NetifeComposerRequest_ProtocolType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kDstIpAddrFieldNumber = 3,
    kDstIpPortFieldNumber = 4,
    kSrcIpAddrFieldNumber = 5,
    kSrcIpPortFieldNumber = 6,
    kRawTextFieldNumber = 9,
    kProtocolTypeFieldNumber = 2,
    kIsRawTextFieldNumber = 7,
    kUuidSubFieldNumber = 8,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string dst_ip_addr = 3;
  void clear_dst_ip_addr();
  const std::string& dst_ip_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst_ip_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst_ip_addr();
  PROTOBUF_NODISCARD std::string* release_dst_ip_addr();
  void set_allocated_dst_ip_addr(std::string* dst_ip_addr);
  private:
  const std::string& _internal_dst_ip_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_ip_addr(const std::string& value);
  std::string* _internal_mutable_dst_ip_addr();
  public:

  // string dst_ip_port = 4;
  void clear_dst_ip_port();
  const std::string& dst_ip_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst_ip_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst_ip_port();
  PROTOBUF_NODISCARD std::string* release_dst_ip_port();
  void set_allocated_dst_ip_port(std::string* dst_ip_port);
  private:
  const std::string& _internal_dst_ip_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst_ip_port(const std::string& value);
  std::string* _internal_mutable_dst_ip_port();
  public:

  // string src_ip_addr = 5;
  void clear_src_ip_addr();
  const std::string& src_ip_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_ip_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_ip_addr();
  PROTOBUF_NODISCARD std::string* release_src_ip_addr();
  void set_allocated_src_ip_addr(std::string* src_ip_addr);
  private:
  const std::string& _internal_src_ip_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_ip_addr(const std::string& value);
  std::string* _internal_mutable_src_ip_addr();
  public:

  // string src_ip_port = 6;
  void clear_src_ip_port();
  const std::string& src_ip_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_ip_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_ip_port();
  PROTOBUF_NODISCARD std::string* release_src_ip_port();
  void set_allocated_src_ip_port(std::string* src_ip_port);
  private:
  const std::string& _internal_src_ip_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_ip_port(const std::string& value);
  std::string* _internal_mutable_src_ip_port();
  public:

  // string raw_text = 9;
  void clear_raw_text();
  const std::string& raw_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_text();
  PROTOBUF_NODISCARD std::string* release_raw_text();
  void set_allocated_raw_text(std::string* raw_text);
  private:
  const std::string& _internal_raw_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_text(const std::string& value);
  std::string* _internal_mutable_raw_text();
  public:

  // .NetifeMessage.NetifeComposerRequest.ProtocolType protocol_type = 2;
  void clear_protocol_type();
  ::NetifeMessage::NetifeComposerRequest_ProtocolType protocol_type() const;
  void set_protocol_type(::NetifeMessage::NetifeComposerRequest_ProtocolType value);
  private:
  ::NetifeMessage::NetifeComposerRequest_ProtocolType _internal_protocol_type() const;
  void _internal_set_protocol_type(::NetifeMessage::NetifeComposerRequest_ProtocolType value);
  public:

  // bool is_raw_text = 7;
  void clear_is_raw_text();
  bool is_raw_text() const;
  void set_is_raw_text(bool value);
  private:
  bool _internal_is_raw_text() const;
  void _internal_set_is_raw_text(bool value);
  public:

  // optional int32 uuid_sub = 8;
  bool has_uuid_sub() const;
  private:
  bool _internal_has_uuid_sub() const;
  public:
  void clear_uuid_sub();
  int32_t uuid_sub() const;
  void set_uuid_sub(int32_t value);
  private:
  int32_t _internal_uuid_sub() const;
  void _internal_set_uuid_sub(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeComposerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ip_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ip_port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_ip_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_ip_port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_text_;
    int protocol_type_;
    bool is_raw_text_;
    int32_t uuid_sub_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeComposerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeComposerResponse) */ {
 public:
  inline NetifeComposerResponse() : NetifeComposerResponse(nullptr) {}
  ~NetifeComposerResponse() override;
  explicit PROTOBUF_CONSTEXPR NetifeComposerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeComposerResponse(const NetifeComposerResponse& from);
  NetifeComposerResponse(NetifeComposerResponse&& from) noexcept
    : NetifeComposerResponse() {
    *this = ::std::move(from);
  }

  inline NetifeComposerResponse& operator=(const NetifeComposerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeComposerResponse& operator=(NetifeComposerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeComposerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeComposerResponse* internal_default_instance() {
    return reinterpret_cast<const NetifeComposerResponse*>(
               &_NetifeComposerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NetifeComposerResponse& a, NetifeComposerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeComposerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeComposerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeComposerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeComposerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeComposerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeComposerResponse& from) {
    NetifeComposerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeComposerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeComposerResponse";
  }
  protected:
  explicit NetifeComposerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kRawBackFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string raw_back = 2;
  void clear_raw_back();
  const std::string& raw_back() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_back(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_back();
  PROTOBUF_NODISCARD std::string* release_raw_back();
  void set_allocated_raw_back(std::string* raw_back);
  private:
  const std::string& _internal_raw_back() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_back(const std::string& value);
  std::string* _internal_mutable_raw_back();
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeComposerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_back_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifePluginCommandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifePluginCommandRequest) */ {
 public:
  inline NetifePluginCommandRequest() : NetifePluginCommandRequest(nullptr) {}
  ~NetifePluginCommandRequest() override;
  explicit PROTOBUF_CONSTEXPR NetifePluginCommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifePluginCommandRequest(const NetifePluginCommandRequest& from);
  NetifePluginCommandRequest(NetifePluginCommandRequest&& from) noexcept
    : NetifePluginCommandRequest() {
    *this = ::std::move(from);
  }

  inline NetifePluginCommandRequest& operator=(const NetifePluginCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifePluginCommandRequest& operator=(NetifePluginCommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifePluginCommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifePluginCommandRequest* internal_default_instance() {
    return reinterpret_cast<const NetifePluginCommandRequest*>(
               &_NetifePluginCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NetifePluginCommandRequest& a, NetifePluginCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifePluginCommandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifePluginCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifePluginCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifePluginCommandRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifePluginCommandRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifePluginCommandRequest& from) {
    NetifePluginCommandRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifePluginCommandRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifePluginCommandRequest";
  }
  protected:
  explicit NetifePluginCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kNamespaceFieldNumber = 1,
    kCommandPrefixFieldNumber = 2,
    kUuidFieldNumber = 4,
    kUuidSubFieldNumber = 5,
  };
  // repeated string params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  const std::string& params(int index) const;
  std::string* mutable_params(int index);
  void set_params(int index, const std::string& value);
  void set_params(int index, std::string&& value);
  void set_params(int index, const char* value);
  void set_params(int index, const char* value, size_t size);
  std::string* add_params();
  void add_params(const std::string& value);
  void add_params(std::string&& value);
  void add_params(const char* value);
  void add_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_params();
  private:
  const std::string& _internal_params(int index) const;
  std::string* _internal_add_params();
  public:

  // string namespace = 1;
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_NODISCARD std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string command_prefix = 2;
  void clear_command_prefix();
  const std::string& command_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command_prefix();
  PROTOBUF_NODISCARD std::string* release_command_prefix();
  void set_allocated_command_prefix(std::string* command_prefix);
  private:
  const std::string& _internal_command_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command_prefix(const std::string& value);
  std::string* _internal_mutable_command_prefix();
  public:

  // optional string uuid = 4;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional int32 uuid_sub = 5;
  bool has_uuid_sub() const;
  private:
  bool _internal_has_uuid_sub() const;
  public:
  void clear_uuid_sub();
  int32_t uuid_sub() const;
  void set_uuid_sub(int32_t value);
  private:
  int32_t _internal_uuid_sub() const;
  void _internal_set_uuid_sub(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifePluginCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int32_t uuid_sub_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifePluginCommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifePluginCommandResponse) */ {
 public:
  inline NetifePluginCommandResponse() : NetifePluginCommandResponse(nullptr) {}
  ~NetifePluginCommandResponse() override;
  explicit PROTOBUF_CONSTEXPR NetifePluginCommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifePluginCommandResponse(const NetifePluginCommandResponse& from);
  NetifePluginCommandResponse(NetifePluginCommandResponse&& from) noexcept
    : NetifePluginCommandResponse() {
    *this = ::std::move(from);
  }

  inline NetifePluginCommandResponse& operator=(const NetifePluginCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifePluginCommandResponse& operator=(NetifePluginCommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifePluginCommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifePluginCommandResponse* internal_default_instance() {
    return reinterpret_cast<const NetifePluginCommandResponse*>(
               &_NetifePluginCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NetifePluginCommandResponse& a, NetifePluginCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifePluginCommandResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifePluginCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifePluginCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifePluginCommandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifePluginCommandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifePluginCommandResponse& from) {
    NetifePluginCommandResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifePluginCommandResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifePluginCommandResponse";
  }
  protected:
  explicit NetifePluginCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string result = 2;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifePluginCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeScriptRegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeScriptRegisterRequest) */ {
 public:
  inline NetifeScriptRegisterRequest() : NetifeScriptRegisterRequest(nullptr) {}
  ~NetifeScriptRegisterRequest() override;
  explicit PROTOBUF_CONSTEXPR NetifeScriptRegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeScriptRegisterRequest(const NetifeScriptRegisterRequest& from);
  NetifeScriptRegisterRequest(NetifeScriptRegisterRequest&& from) noexcept
    : NetifeScriptRegisterRequest() {
    *this = ::std::move(from);
  }

  inline NetifeScriptRegisterRequest& operator=(const NetifeScriptRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeScriptRegisterRequest& operator=(NetifeScriptRegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeScriptRegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeScriptRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const NetifeScriptRegisterRequest*>(
               &_NetifeScriptRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NetifeScriptRegisterRequest& a, NetifeScriptRegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeScriptRegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeScriptRegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeScriptRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeScriptRegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeScriptRegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeScriptRegisterRequest& from) {
    NetifeScriptRegisterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeScriptRegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeScriptRegisterRequest";
  }
  protected:
  explicit NetifeScriptRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptNameFieldNumber = 1,
    kScriptDescriptionFieldNumber = 2,
    kTriggerAddrFieldNumber = 3,
    kTriggerPortFieldNumber = 4,
    kTriggerSpreadChainFieldNumber = 5,
    kTriggerSpreadPluginFieldNumber = 6,
    kTriggerSpreadChainBeforeFieldNumber = 7,
    kTriggerSpreadPluginBeforeFieldNumber = 8,
    kScriptContentFieldNumber = 9,
    kVersionFieldNumber = 10,
  };
  // string script_name = 1;
  void clear_script_name();
  const std::string& script_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_name();
  PROTOBUF_NODISCARD std::string* release_script_name();
  void set_allocated_script_name(std::string* script_name);
  private:
  const std::string& _internal_script_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script_name(const std::string& value);
  std::string* _internal_mutable_script_name();
  public:

  // string script_description = 2;
  void clear_script_description();
  const std::string& script_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_description();
  PROTOBUF_NODISCARD std::string* release_script_description();
  void set_allocated_script_description(std::string* script_description);
  private:
  const std::string& _internal_script_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script_description(const std::string& value);
  std::string* _internal_mutable_script_description();
  public:

  // optional string trigger_addr = 3;
  bool has_trigger_addr() const;
  private:
  bool _internal_has_trigger_addr() const;
  public:
  void clear_trigger_addr();
  const std::string& trigger_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger_addr();
  PROTOBUF_NODISCARD std::string* release_trigger_addr();
  void set_allocated_trigger_addr(std::string* trigger_addr);
  private:
  const std::string& _internal_trigger_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger_addr(const std::string& value);
  std::string* _internal_mutable_trigger_addr();
  public:

  // optional string trigger_port = 4;
  bool has_trigger_port() const;
  private:
  bool _internal_has_trigger_port() const;
  public:
  void clear_trigger_port();
  const std::string& trigger_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger_port();
  PROTOBUF_NODISCARD std::string* release_trigger_port();
  void set_allocated_trigger_port(std::string* trigger_port);
  private:
  const std::string& _internal_trigger_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger_port(const std::string& value);
  std::string* _internal_mutable_trigger_port();
  public:

  // optional string trigger_spread_chain = 5;
  bool has_trigger_spread_chain() const;
  private:
  bool _internal_has_trigger_spread_chain() const;
  public:
  void clear_trigger_spread_chain();
  const std::string& trigger_spread_chain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger_spread_chain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger_spread_chain();
  PROTOBUF_NODISCARD std::string* release_trigger_spread_chain();
  void set_allocated_trigger_spread_chain(std::string* trigger_spread_chain);
  private:
  const std::string& _internal_trigger_spread_chain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger_spread_chain(const std::string& value);
  std::string* _internal_mutable_trigger_spread_chain();
  public:

  // optional string trigger_spread_plugin = 6;
  bool has_trigger_spread_plugin() const;
  private:
  bool _internal_has_trigger_spread_plugin() const;
  public:
  void clear_trigger_spread_plugin();
  const std::string& trigger_spread_plugin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger_spread_plugin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger_spread_plugin();
  PROTOBUF_NODISCARD std::string* release_trigger_spread_plugin();
  void set_allocated_trigger_spread_plugin(std::string* trigger_spread_plugin);
  private:
  const std::string& _internal_trigger_spread_plugin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger_spread_plugin(const std::string& value);
  std::string* _internal_mutable_trigger_spread_plugin();
  public:

  // optional string trigger_spread_chain_before = 7;
  bool has_trigger_spread_chain_before() const;
  private:
  bool _internal_has_trigger_spread_chain_before() const;
  public:
  void clear_trigger_spread_chain_before();
  const std::string& trigger_spread_chain_before() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger_spread_chain_before(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger_spread_chain_before();
  PROTOBUF_NODISCARD std::string* release_trigger_spread_chain_before();
  void set_allocated_trigger_spread_chain_before(std::string* trigger_spread_chain_before);
  private:
  const std::string& _internal_trigger_spread_chain_before() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger_spread_chain_before(const std::string& value);
  std::string* _internal_mutable_trigger_spread_chain_before();
  public:

  // optional string trigger_spread_plugin_before = 8;
  bool has_trigger_spread_plugin_before() const;
  private:
  bool _internal_has_trigger_spread_plugin_before() const;
  public:
  void clear_trigger_spread_plugin_before();
  const std::string& trigger_spread_plugin_before() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger_spread_plugin_before(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger_spread_plugin_before();
  PROTOBUF_NODISCARD std::string* release_trigger_spread_plugin_before();
  void set_allocated_trigger_spread_plugin_before(std::string* trigger_spread_plugin_before);
  private:
  const std::string& _internal_trigger_spread_plugin_before() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger_spread_plugin_before(const std::string& value);
  std::string* _internal_mutable_trigger_spread_plugin_before();
  public:

  // string script_content = 9;
  void clear_script_content();
  const std::string& script_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_content();
  PROTOBUF_NODISCARD std::string* release_script_content();
  void set_allocated_script_content(std::string* script_content);
  private:
  const std::string& _internal_script_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script_content(const std::string& value);
  std::string* _internal_mutable_script_content();
  public:

  // string version = 10;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeScriptRegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_port_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_spread_chain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_spread_plugin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_spread_chain_before_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_spread_plugin_before_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeScriptRegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeScriptRegisterResponse) */ {
 public:
  inline NetifeScriptRegisterResponse() : NetifeScriptRegisterResponse(nullptr) {}
  ~NetifeScriptRegisterResponse() override;
  explicit PROTOBUF_CONSTEXPR NetifeScriptRegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeScriptRegisterResponse(const NetifeScriptRegisterResponse& from);
  NetifeScriptRegisterResponse(NetifeScriptRegisterResponse&& from) noexcept
    : NetifeScriptRegisterResponse() {
    *this = ::std::move(from);
  }

  inline NetifeScriptRegisterResponse& operator=(const NetifeScriptRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeScriptRegisterResponse& operator=(NetifeScriptRegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeScriptRegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeScriptRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const NetifeScriptRegisterResponse*>(
               &_NetifeScriptRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NetifeScriptRegisterResponse& a, NetifeScriptRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeScriptRegisterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeScriptRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeScriptRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeScriptRegisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeScriptRegisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeScriptRegisterResponse& from) {
    NetifeScriptRegisterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeScriptRegisterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeScriptRegisterResponse";
  }
  protected:
  explicit NetifeScriptRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string result = 2;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeScriptRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeScriptDebuggerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeScriptDebuggerRequest) */ {
 public:
  inline NetifeScriptDebuggerRequest() : NetifeScriptDebuggerRequest(nullptr) {}
  ~NetifeScriptDebuggerRequest() override;
  explicit PROTOBUF_CONSTEXPR NetifeScriptDebuggerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeScriptDebuggerRequest(const NetifeScriptDebuggerRequest& from);
  NetifeScriptDebuggerRequest(NetifeScriptDebuggerRequest&& from) noexcept
    : NetifeScriptDebuggerRequest() {
    *this = ::std::move(from);
  }

  inline NetifeScriptDebuggerRequest& operator=(const NetifeScriptDebuggerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeScriptDebuggerRequest& operator=(NetifeScriptDebuggerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeScriptDebuggerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeScriptDebuggerRequest* internal_default_instance() {
    return reinterpret_cast<const NetifeScriptDebuggerRequest*>(
               &_NetifeScriptDebuggerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NetifeScriptDebuggerRequest& a, NetifeScriptDebuggerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeScriptDebuggerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeScriptDebuggerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeScriptDebuggerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeScriptDebuggerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeScriptDebuggerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeScriptDebuggerRequest& from) {
    NetifeScriptDebuggerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeScriptDebuggerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeScriptDebuggerRequest";
  }
  protected:
  explicit NetifeScriptDebuggerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptNameFieldNumber = 1,
  };
  // string script_name = 1;
  void clear_script_name();
  const std::string& script_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_name();
  PROTOBUF_NODISCARD std::string* release_script_name();
  void set_allocated_script_name(std::string* script_name);
  private:
  const std::string& _internal_script_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script_name(const std::string& value);
  std::string* _internal_mutable_script_name();
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeScriptDebuggerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeScriptDebuggerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeScriptDebuggerResponse) */ {
 public:
  inline NetifeScriptDebuggerResponse() : NetifeScriptDebuggerResponse(nullptr) {}
  ~NetifeScriptDebuggerResponse() override;
  explicit PROTOBUF_CONSTEXPR NetifeScriptDebuggerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeScriptDebuggerResponse(const NetifeScriptDebuggerResponse& from);
  NetifeScriptDebuggerResponse(NetifeScriptDebuggerResponse&& from) noexcept
    : NetifeScriptDebuggerResponse() {
    *this = ::std::move(from);
  }

  inline NetifeScriptDebuggerResponse& operator=(const NetifeScriptDebuggerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeScriptDebuggerResponse& operator=(NetifeScriptDebuggerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeScriptDebuggerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeScriptDebuggerResponse* internal_default_instance() {
    return reinterpret_cast<const NetifeScriptDebuggerResponse*>(
               &_NetifeScriptDebuggerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NetifeScriptDebuggerResponse& a, NetifeScriptDebuggerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeScriptDebuggerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeScriptDebuggerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeScriptDebuggerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeScriptDebuggerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeScriptDebuggerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeScriptDebuggerResponse& from) {
    NetifeScriptDebuggerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeScriptDebuggerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeScriptDebuggerResponse";
  }
  protected:
  explicit NetifeScriptDebuggerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWsAddrFieldNumber = 1,
    kWsPortFieldNumber = 2,
  };
  // string ws_addr = 1;
  void clear_ws_addr();
  const std::string& ws_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ws_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ws_addr();
  PROTOBUF_NODISCARD std::string* release_ws_addr();
  void set_allocated_ws_addr(std::string* ws_addr);
  private:
  const std::string& _internal_ws_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ws_addr(const std::string& value);
  std::string* _internal_mutable_ws_addr();
  public:

  // string ws_port = 2;
  void clear_ws_port();
  const std::string& ws_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ws_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ws_port();
  PROTOBUF_NODISCARD std::string* release_ws_port();
  void set_allocated_ws_port(std::string* ws_port);
  private:
  const std::string& _internal_ws_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ws_port(const std::string& value);
  std::string* _internal_mutable_ws_port();
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeScriptDebuggerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ws_addr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ws_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeScriptCommandRequest_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetifeScriptCommandRequest_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetifeScriptCommandRequest_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  NetifeScriptCommandRequest_ParamsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR NetifeScriptCommandRequest_ParamsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit NetifeScriptCommandRequest_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NetifeScriptCommandRequest_ParamsEntry_DoNotUse& other);
  static const NetifeScriptCommandRequest_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetifeScriptCommandRequest_ParamsEntry_DoNotUse*>(&_NetifeScriptCommandRequest_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "NetifeMessage.NetifeScriptCommandRequest.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "NetifeMessage.NetifeScriptCommandRequest.ParamsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_NetifeMessage_2eproto;
};

// -------------------------------------------------------------------

class NetifeScriptCommandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeScriptCommandRequest) */ {
 public:
  inline NetifeScriptCommandRequest() : NetifeScriptCommandRequest(nullptr) {}
  ~NetifeScriptCommandRequest() override;
  explicit PROTOBUF_CONSTEXPR NetifeScriptCommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeScriptCommandRequest(const NetifeScriptCommandRequest& from);
  NetifeScriptCommandRequest(NetifeScriptCommandRequest&& from) noexcept
    : NetifeScriptCommandRequest() {
    *this = ::std::move(from);
  }

  inline NetifeScriptCommandRequest& operator=(const NetifeScriptCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeScriptCommandRequest& operator=(NetifeScriptCommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeScriptCommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeScriptCommandRequest* internal_default_instance() {
    return reinterpret_cast<const NetifeScriptCommandRequest*>(
               &_NetifeScriptCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NetifeScriptCommandRequest& a, NetifeScriptCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeScriptCommandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeScriptCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeScriptCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeScriptCommandRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeScriptCommandRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeScriptCommandRequest& from) {
    NetifeScriptCommandRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeScriptCommandRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeScriptCommandRequest";
  }
  protected:
  explicit NetifeScriptCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kScriptNameFieldNumber = 1,
    kExportFunctionFieldNumber = 2,
  };
  // map<string, string> params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // string script_name = 1;
  void clear_script_name();
  const std::string& script_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_name();
  PROTOBUF_NODISCARD std::string* release_script_name();
  void set_allocated_script_name(std::string* script_name);
  private:
  const std::string& _internal_script_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script_name(const std::string& value);
  std::string* _internal_mutable_script_name();
  public:

  // string export_function = 2;
  void clear_export_function();
  const std::string& export_function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_export_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_export_function();
  PROTOBUF_NODISCARD std::string* release_export_function();
  void set_allocated_export_function(std::string* export_function);
  private:
  const std::string& _internal_export_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_export_function(const std::string& value);
  std::string* _internal_mutable_export_function();
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeScriptCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        NetifeScriptCommandRequest_ParamsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr export_function_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// -------------------------------------------------------------------

class NetifeScriptCommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetifeMessage.NetifeScriptCommandResponse) */ {
 public:
  inline NetifeScriptCommandResponse() : NetifeScriptCommandResponse(nullptr) {}
  ~NetifeScriptCommandResponse() override;
  explicit PROTOBUF_CONSTEXPR NetifeScriptCommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetifeScriptCommandResponse(const NetifeScriptCommandResponse& from);
  NetifeScriptCommandResponse(NetifeScriptCommandResponse&& from) noexcept
    : NetifeScriptCommandResponse() {
    *this = ::std::move(from);
  }

  inline NetifeScriptCommandResponse& operator=(const NetifeScriptCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetifeScriptCommandResponse& operator=(NetifeScriptCommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetifeScriptCommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetifeScriptCommandResponse* internal_default_instance() {
    return reinterpret_cast<const NetifeScriptCommandResponse*>(
               &_NetifeScriptCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NetifeScriptCommandResponse& a, NetifeScriptCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetifeScriptCommandResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetifeScriptCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetifeScriptCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetifeScriptCommandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetifeScriptCommandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NetifeScriptCommandResponse& from) {
    NetifeScriptCommandResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetifeScriptCommandResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetifeMessage.NetifeScriptCommandResponse";
  }
  protected:
  explicit NetifeScriptCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:NetifeMessage.NetifeScriptCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NetifeMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetifeProbeRequest

// string uuid = 1;
inline void NetifeProbeRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::uuid() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.uuid)
}
inline std::string* NetifeProbeRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.uuid)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void NetifeProbeRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void NetifeProbeRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.uuid)
}

// .NetifeMessage.NetifeProbeRequest.RequestType request_type = 2;
inline void NetifeProbeRequest::clear_request_type() {
  _impl_.request_type_ = 0;
}
inline ::NetifeMessage::NetifeProbeRequest_RequestType NetifeProbeRequest::_internal_request_type() const {
  return static_cast< ::NetifeMessage::NetifeProbeRequest_RequestType >(_impl_.request_type_);
}
inline ::NetifeMessage::NetifeProbeRequest_RequestType NetifeProbeRequest::request_type() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.request_type)
  return _internal_request_type();
}
inline void NetifeProbeRequest::_internal_set_request_type(::NetifeMessage::NetifeProbeRequest_RequestType value) {
  
  _impl_.request_type_ = value;
}
inline void NetifeProbeRequest::set_request_type(::NetifeMessage::NetifeProbeRequest_RequestType value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.request_type)
}

// .NetifeMessage.NetifeProbeRequest.ApplicationType application_type = 3;
inline void NetifeProbeRequest::clear_application_type() {
  _impl_.application_type_ = 0;
}
inline ::NetifeMessage::NetifeProbeRequest_ApplicationType NetifeProbeRequest::_internal_application_type() const {
  return static_cast< ::NetifeMessage::NetifeProbeRequest_ApplicationType >(_impl_.application_type_);
}
inline ::NetifeMessage::NetifeProbeRequest_ApplicationType NetifeProbeRequest::application_type() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.application_type)
  return _internal_application_type();
}
inline void NetifeProbeRequest::_internal_set_application_type(::NetifeMessage::NetifeProbeRequest_ApplicationType value) {
  
  _impl_.application_type_ = value;
}
inline void NetifeProbeRequest::set_application_type(::NetifeMessage::NetifeProbeRequest_ApplicationType value) {
  _internal_set_application_type(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.application_type)
}

// .NetifeMessage.NetifeProbeRequest.Protocol protocol = 4;
inline void NetifeProbeRequest::clear_protocol() {
  _impl_.protocol_ = 0;
}
inline ::NetifeMessage::NetifeProbeRequest_Protocol NetifeProbeRequest::_internal_protocol() const {
  return static_cast< ::NetifeMessage::NetifeProbeRequest_Protocol >(_impl_.protocol_);
}
inline ::NetifeMessage::NetifeProbeRequest_Protocol NetifeProbeRequest::protocol() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.protocol)
  return _internal_protocol();
}
inline void NetifeProbeRequest::_internal_set_protocol(::NetifeMessage::NetifeProbeRequest_Protocol value) {
  
  _impl_.protocol_ = value;
}
inline void NetifeProbeRequest::set_protocol(::NetifeMessage::NetifeProbeRequest_Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.protocol)
}

// string dst_ip_addr = 5;
inline void NetifeProbeRequest::clear_dst_ip_addr() {
  _impl_.dst_ip_addr_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::dst_ip_addr() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.dst_ip_addr)
  return _internal_dst_ip_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_dst_ip_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dst_ip_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.dst_ip_addr)
}
inline std::string* NetifeProbeRequest::mutable_dst_ip_addr() {
  std::string* _s = _internal_mutable_dst_ip_addr();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.dst_ip_addr)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_dst_ip_addr() const {
  return _impl_.dst_ip_addr_.Get();
}
inline void NetifeProbeRequest::_internal_set_dst_ip_addr(const std::string& value) {
  
  _impl_.dst_ip_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_dst_ip_addr() {
  
  return _impl_.dst_ip_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_dst_ip_addr() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.dst_ip_addr)
  return _impl_.dst_ip_addr_.Release();
}
inline void NetifeProbeRequest::set_allocated_dst_ip_addr(std::string* dst_ip_addr) {
  if (dst_ip_addr != nullptr) {
    
  } else {
    
  }
  _impl_.dst_ip_addr_.SetAllocated(dst_ip_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dst_ip_addr_.IsDefault()) {
    _impl_.dst_ip_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.dst_ip_addr)
}

// string dst_ip_port = 6;
inline void NetifeProbeRequest::clear_dst_ip_port() {
  _impl_.dst_ip_port_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::dst_ip_port() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.dst_ip_port)
  return _internal_dst_ip_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_dst_ip_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dst_ip_port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.dst_ip_port)
}
inline std::string* NetifeProbeRequest::mutable_dst_ip_port() {
  std::string* _s = _internal_mutable_dst_ip_port();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.dst_ip_port)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_dst_ip_port() const {
  return _impl_.dst_ip_port_.Get();
}
inline void NetifeProbeRequest::_internal_set_dst_ip_port(const std::string& value) {
  
  _impl_.dst_ip_port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_dst_ip_port() {
  
  return _impl_.dst_ip_port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_dst_ip_port() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.dst_ip_port)
  return _impl_.dst_ip_port_.Release();
}
inline void NetifeProbeRequest::set_allocated_dst_ip_port(std::string* dst_ip_port) {
  if (dst_ip_port != nullptr) {
    
  } else {
    
  }
  _impl_.dst_ip_port_.SetAllocated(dst_ip_port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dst_ip_port_.IsDefault()) {
    _impl_.dst_ip_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.dst_ip_port)
}

// string src_ip_addr = 7;
inline void NetifeProbeRequest::clear_src_ip_addr() {
  _impl_.src_ip_addr_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::src_ip_addr() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.src_ip_addr)
  return _internal_src_ip_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_src_ip_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_ip_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.src_ip_addr)
}
inline std::string* NetifeProbeRequest::mutable_src_ip_addr() {
  std::string* _s = _internal_mutable_src_ip_addr();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.src_ip_addr)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_src_ip_addr() const {
  return _impl_.src_ip_addr_.Get();
}
inline void NetifeProbeRequest::_internal_set_src_ip_addr(const std::string& value) {
  
  _impl_.src_ip_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_src_ip_addr() {
  
  return _impl_.src_ip_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_src_ip_addr() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.src_ip_addr)
  return _impl_.src_ip_addr_.Release();
}
inline void NetifeProbeRequest::set_allocated_src_ip_addr(std::string* src_ip_addr) {
  if (src_ip_addr != nullptr) {
    
  } else {
    
  }
  _impl_.src_ip_addr_.SetAllocated(src_ip_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_ip_addr_.IsDefault()) {
    _impl_.src_ip_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.src_ip_addr)
}

// string src_ip_port = 8;
inline void NetifeProbeRequest::clear_src_ip_port() {
  _impl_.src_ip_port_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::src_ip_port() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.src_ip_port)
  return _internal_src_ip_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_src_ip_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_ip_port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.src_ip_port)
}
inline std::string* NetifeProbeRequest::mutable_src_ip_port() {
  std::string* _s = _internal_mutable_src_ip_port();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.src_ip_port)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_src_ip_port() const {
  return _impl_.src_ip_port_.Get();
}
inline void NetifeProbeRequest::_internal_set_src_ip_port(const std::string& value) {
  
  _impl_.src_ip_port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_src_ip_port() {
  
  return _impl_.src_ip_port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_src_ip_port() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.src_ip_port)
  return _impl_.src_ip_port_.Release();
}
inline void NetifeProbeRequest::set_allocated_src_ip_port(std::string* src_ip_port) {
  if (src_ip_port != nullptr) {
    
  } else {
    
  }
  _impl_.src_ip_port_.SetAllocated(src_ip_port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_ip_port_.IsDefault()) {
    _impl_.src_ip_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.src_ip_port)
}

// bool is_raw_text = 9;
inline void NetifeProbeRequest::clear_is_raw_text() {
  _impl_.is_raw_text_ = false;
}
inline bool NetifeProbeRequest::_internal_is_raw_text() const {
  return _impl_.is_raw_text_;
}
inline bool NetifeProbeRequest::is_raw_text() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.is_raw_text)
  return _internal_is_raw_text();
}
inline void NetifeProbeRequest::_internal_set_is_raw_text(bool value) {
  
  _impl_.is_raw_text_ = value;
}
inline void NetifeProbeRequest::set_is_raw_text(bool value) {
  _internal_set_is_raw_text(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.is_raw_text)
}

// optional int32 uuid_sub = 10;
inline bool NetifeProbeRequest::_internal_has_uuid_sub() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetifeProbeRequest::has_uuid_sub() const {
  return _internal_has_uuid_sub();
}
inline void NetifeProbeRequest::clear_uuid_sub() {
  _impl_.uuid_sub_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t NetifeProbeRequest::_internal_uuid_sub() const {
  return _impl_.uuid_sub_;
}
inline int32_t NetifeProbeRequest::uuid_sub() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.uuid_sub)
  return _internal_uuid_sub();
}
inline void NetifeProbeRequest::_internal_set_uuid_sub(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uuid_sub_ = value;
}
inline void NetifeProbeRequest::set_uuid_sub(int32_t value) {
  _internal_set_uuid_sub(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.uuid_sub)
}

// string raw_text = 11;
inline void NetifeProbeRequest::clear_raw_text() {
  _impl_.raw_text_.ClearToEmpty();
}
inline const std::string& NetifeProbeRequest::raw_text() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.raw_text)
  return _internal_raw_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_raw_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.raw_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.raw_text)
}
inline std::string* NetifeProbeRequest::mutable_raw_text() {
  std::string* _s = _internal_mutable_raw_text();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.raw_text)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_raw_text() const {
  return _impl_.raw_text_.Get();
}
inline void NetifeProbeRequest::_internal_set_raw_text(const std::string& value) {
  
  _impl_.raw_text_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_raw_text() {
  
  return _impl_.raw_text_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_raw_text() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.raw_text)
  return _impl_.raw_text_.Release();
}
inline void NetifeProbeRequest::set_allocated_raw_text(std::string* raw_text) {
  if (raw_text != nullptr) {
    
  } else {
    
  }
  _impl_.raw_text_.SetAllocated(raw_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_text_.IsDefault()) {
    _impl_.raw_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.raw_text)
}

// optional string pid = 12;
inline bool NetifeProbeRequest::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetifeProbeRequest::has_pid() const {
  return _internal_has_pid();
}
inline void NetifeProbeRequest::clear_pid() {
  _impl_.pid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetifeProbeRequest::pid() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.pid)
  return _internal_pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_pid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.pid)
}
inline std::string* NetifeProbeRequest::mutable_pid() {
  std::string* _s = _internal_mutable_pid();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.pid)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_pid() const {
  return _impl_.pid_.Get();
}
inline void NetifeProbeRequest::_internal_set_pid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pid_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_pid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pid_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_pid() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.pid)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pid_.IsDefault()) {
    _impl_.pid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifeProbeRequest::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pid_.SetAllocated(pid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pid_.IsDefault()) {
    _impl_.pid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.pid)
}

// optional string process_name = 13;
inline bool NetifeProbeRequest::_internal_has_process_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetifeProbeRequest::has_process_name() const {
  return _internal_has_process_name();
}
inline void NetifeProbeRequest::clear_process_name() {
  _impl_.process_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetifeProbeRequest::process_name() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeRequest.process_name)
  return _internal_process_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeRequest::set_process_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.process_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeRequest.process_name)
}
inline std::string* NetifeProbeRequest::mutable_process_name() {
  std::string* _s = _internal_mutable_process_name();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeRequest.process_name)
  return _s;
}
inline const std::string& NetifeProbeRequest::_internal_process_name() const {
  return _impl_.process_name_.Get();
}
inline void NetifeProbeRequest::_internal_set_process_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.process_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::_internal_mutable_process_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.process_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeRequest::release_process_name() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeRequest.process_name)
  if (!_internal_has_process_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.process_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_name_.IsDefault()) {
    _impl_.process_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifeProbeRequest::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.process_name_.SetAllocated(process_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.process_name_.IsDefault()) {
    _impl_.process_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeRequest.process_name)
}

// -------------------------------------------------------------------

// NetifeProbeResponse

// string uuid = 1;
inline void NetifeProbeResponse::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& NetifeProbeResponse::uuid() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeResponse.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeResponse::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeResponse.uuid)
}
inline std::string* NetifeProbeResponse::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeResponse.uuid)
  return _s;
}
inline const std::string& NetifeProbeResponse::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void NetifeProbeResponse::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeResponse.uuid)
  return _impl_.uuid_.Release();
}
inline void NetifeProbeResponse::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeResponse.uuid)
}

// string dst_ip_addr = 2;
inline void NetifeProbeResponse::clear_dst_ip_addr() {
  _impl_.dst_ip_addr_.ClearToEmpty();
}
inline const std::string& NetifeProbeResponse::dst_ip_addr() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeResponse.dst_ip_addr)
  return _internal_dst_ip_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeResponse::set_dst_ip_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dst_ip_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeResponse.dst_ip_addr)
}
inline std::string* NetifeProbeResponse::mutable_dst_ip_addr() {
  std::string* _s = _internal_mutable_dst_ip_addr();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeResponse.dst_ip_addr)
  return _s;
}
inline const std::string& NetifeProbeResponse::_internal_dst_ip_addr() const {
  return _impl_.dst_ip_addr_.Get();
}
inline void NetifeProbeResponse::_internal_set_dst_ip_addr(const std::string& value) {
  
  _impl_.dst_ip_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::_internal_mutable_dst_ip_addr() {
  
  return _impl_.dst_ip_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::release_dst_ip_addr() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeResponse.dst_ip_addr)
  return _impl_.dst_ip_addr_.Release();
}
inline void NetifeProbeResponse::set_allocated_dst_ip_addr(std::string* dst_ip_addr) {
  if (dst_ip_addr != nullptr) {
    
  } else {
    
  }
  _impl_.dst_ip_addr_.SetAllocated(dst_ip_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dst_ip_addr_.IsDefault()) {
    _impl_.dst_ip_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeResponse.dst_ip_addr)
}

// string dst_ip_port = 3;
inline void NetifeProbeResponse::clear_dst_ip_port() {
  _impl_.dst_ip_port_.ClearToEmpty();
}
inline const std::string& NetifeProbeResponse::dst_ip_port() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeResponse.dst_ip_port)
  return _internal_dst_ip_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeResponse::set_dst_ip_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dst_ip_port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeResponse.dst_ip_port)
}
inline std::string* NetifeProbeResponse::mutable_dst_ip_port() {
  std::string* _s = _internal_mutable_dst_ip_port();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeResponse.dst_ip_port)
  return _s;
}
inline const std::string& NetifeProbeResponse::_internal_dst_ip_port() const {
  return _impl_.dst_ip_port_.Get();
}
inline void NetifeProbeResponse::_internal_set_dst_ip_port(const std::string& value) {
  
  _impl_.dst_ip_port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::_internal_mutable_dst_ip_port() {
  
  return _impl_.dst_ip_port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::release_dst_ip_port() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeResponse.dst_ip_port)
  return _impl_.dst_ip_port_.Release();
}
inline void NetifeProbeResponse::set_allocated_dst_ip_port(std::string* dst_ip_port) {
  if (dst_ip_port != nullptr) {
    
  } else {
    
  }
  _impl_.dst_ip_port_.SetAllocated(dst_ip_port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dst_ip_port_.IsDefault()) {
    _impl_.dst_ip_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeResponse.dst_ip_port)
}

// string response_text = 4;
inline void NetifeProbeResponse::clear_response_text() {
  _impl_.response_text_.ClearToEmpty();
}
inline const std::string& NetifeProbeResponse::response_text() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeProbeResponse.response_text)
  return _internal_response_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeProbeResponse::set_response_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.response_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeProbeResponse.response_text)
}
inline std::string* NetifeProbeResponse::mutable_response_text() {
  std::string* _s = _internal_mutable_response_text();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeProbeResponse.response_text)
  return _s;
}
inline const std::string& NetifeProbeResponse::_internal_response_text() const {
  return _impl_.response_text_.Get();
}
inline void NetifeProbeResponse::_internal_set_response_text(const std::string& value) {
  
  _impl_.response_text_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::_internal_mutable_response_text() {
  
  return _impl_.response_text_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeProbeResponse::release_response_text() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeProbeResponse.response_text)
  return _impl_.response_text_.Release();
}
inline void NetifeProbeResponse::set_allocated_response_text(std::string* response_text) {
  if (response_text != nullptr) {
    
  } else {
    
  }
  _impl_.response_text_.SetAllocated(response_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_text_.IsDefault()) {
    _impl_.response_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeProbeResponse.response_text)
}

// -------------------------------------------------------------------

// NetifeRegisterRequest

// string grpc_host = 1;
inline void NetifeRegisterRequest::clear_grpc_host() {
  _impl_.grpc_host_.ClearToEmpty();
}
inline const std::string& NetifeRegisterRequest::grpc_host() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeRegisterRequest.grpc_host)
  return _internal_grpc_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeRegisterRequest::set_grpc_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.grpc_host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeRegisterRequest.grpc_host)
}
inline std::string* NetifeRegisterRequest::mutable_grpc_host() {
  std::string* _s = _internal_mutable_grpc_host();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeRegisterRequest.grpc_host)
  return _s;
}
inline const std::string& NetifeRegisterRequest::_internal_grpc_host() const {
  return _impl_.grpc_host_.Get();
}
inline void NetifeRegisterRequest::_internal_set_grpc_host(const std::string& value) {
  
  _impl_.grpc_host_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeRegisterRequest::_internal_mutable_grpc_host() {
  
  return _impl_.grpc_host_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeRegisterRequest::release_grpc_host() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeRegisterRequest.grpc_host)
  return _impl_.grpc_host_.Release();
}
inline void NetifeRegisterRequest::set_allocated_grpc_host(std::string* grpc_host) {
  if (grpc_host != nullptr) {
    
  } else {
    
  }
  _impl_.grpc_host_.SetAllocated(grpc_host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.grpc_host_.IsDefault()) {
    _impl_.grpc_host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeRegisterRequest.grpc_host)
}

// string grpc_port = 2;
inline void NetifeRegisterRequest::clear_grpc_port() {
  _impl_.grpc_port_.ClearToEmpty();
}
inline const std::string& NetifeRegisterRequest::grpc_port() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeRegisterRequest.grpc_port)
  return _internal_grpc_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeRegisterRequest::set_grpc_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.grpc_port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeRegisterRequest.grpc_port)
}
inline std::string* NetifeRegisterRequest::mutable_grpc_port() {
  std::string* _s = _internal_mutable_grpc_port();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeRegisterRequest.grpc_port)
  return _s;
}
inline const std::string& NetifeRegisterRequest::_internal_grpc_port() const {
  return _impl_.grpc_port_.Get();
}
inline void NetifeRegisterRequest::_internal_set_grpc_port(const std::string& value) {
  
  _impl_.grpc_port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeRegisterRequest::_internal_mutable_grpc_port() {
  
  return _impl_.grpc_port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeRegisterRequest::release_grpc_port() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeRegisterRequest.grpc_port)
  return _impl_.grpc_port_.Release();
}
inline void NetifeRegisterRequest::set_allocated_grpc_port(std::string* grpc_port) {
  if (grpc_port != nullptr) {
    
  } else {
    
  }
  _impl_.grpc_port_.SetAllocated(grpc_port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.grpc_port_.IsDefault()) {
    _impl_.grpc_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeRegisterRequest.grpc_port)
}

// -------------------------------------------------------------------

// NetifeRegisterResponse

// bool status = 1;
inline void NetifeRegisterResponse::clear_status() {
  _impl_.status_ = false;
}
inline bool NetifeRegisterResponse::_internal_status() const {
  return _impl_.status_;
}
inline bool NetifeRegisterResponse::status() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeRegisterResponse.status)
  return _internal_status();
}
inline void NetifeRegisterResponse::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void NetifeRegisterResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeRegisterResponse.status)
}

// -------------------------------------------------------------------

// NetifeComposerRequest

// string uuid = 1;
inline void NetifeComposerRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& NetifeComposerRequest::uuid() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeComposerRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerRequest.uuid)
}
inline std::string* NetifeComposerRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeComposerRequest.uuid)
  return _s;
}
inline const std::string& NetifeComposerRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void NetifeComposerRequest::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeComposerRequest.uuid)
  return _impl_.uuid_.Release();
}
inline void NetifeComposerRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeComposerRequest.uuid)
}

// .NetifeMessage.NetifeComposerRequest.ProtocolType protocol_type = 2;
inline void NetifeComposerRequest::clear_protocol_type() {
  _impl_.protocol_type_ = 0;
}
inline ::NetifeMessage::NetifeComposerRequest_ProtocolType NetifeComposerRequest::_internal_protocol_type() const {
  return static_cast< ::NetifeMessage::NetifeComposerRequest_ProtocolType >(_impl_.protocol_type_);
}
inline ::NetifeMessage::NetifeComposerRequest_ProtocolType NetifeComposerRequest::protocol_type() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerRequest.protocol_type)
  return _internal_protocol_type();
}
inline void NetifeComposerRequest::_internal_set_protocol_type(::NetifeMessage::NetifeComposerRequest_ProtocolType value) {
  
  _impl_.protocol_type_ = value;
}
inline void NetifeComposerRequest::set_protocol_type(::NetifeMessage::NetifeComposerRequest_ProtocolType value) {
  _internal_set_protocol_type(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerRequest.protocol_type)
}

// string dst_ip_addr = 3;
inline void NetifeComposerRequest::clear_dst_ip_addr() {
  _impl_.dst_ip_addr_.ClearToEmpty();
}
inline const std::string& NetifeComposerRequest::dst_ip_addr() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerRequest.dst_ip_addr)
  return _internal_dst_ip_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeComposerRequest::set_dst_ip_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dst_ip_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerRequest.dst_ip_addr)
}
inline std::string* NetifeComposerRequest::mutable_dst_ip_addr() {
  std::string* _s = _internal_mutable_dst_ip_addr();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeComposerRequest.dst_ip_addr)
  return _s;
}
inline const std::string& NetifeComposerRequest::_internal_dst_ip_addr() const {
  return _impl_.dst_ip_addr_.Get();
}
inline void NetifeComposerRequest::_internal_set_dst_ip_addr(const std::string& value) {
  
  _impl_.dst_ip_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::_internal_mutable_dst_ip_addr() {
  
  return _impl_.dst_ip_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::release_dst_ip_addr() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeComposerRequest.dst_ip_addr)
  return _impl_.dst_ip_addr_.Release();
}
inline void NetifeComposerRequest::set_allocated_dst_ip_addr(std::string* dst_ip_addr) {
  if (dst_ip_addr != nullptr) {
    
  } else {
    
  }
  _impl_.dst_ip_addr_.SetAllocated(dst_ip_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dst_ip_addr_.IsDefault()) {
    _impl_.dst_ip_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeComposerRequest.dst_ip_addr)
}

// string dst_ip_port = 4;
inline void NetifeComposerRequest::clear_dst_ip_port() {
  _impl_.dst_ip_port_.ClearToEmpty();
}
inline const std::string& NetifeComposerRequest::dst_ip_port() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerRequest.dst_ip_port)
  return _internal_dst_ip_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeComposerRequest::set_dst_ip_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dst_ip_port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerRequest.dst_ip_port)
}
inline std::string* NetifeComposerRequest::mutable_dst_ip_port() {
  std::string* _s = _internal_mutable_dst_ip_port();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeComposerRequest.dst_ip_port)
  return _s;
}
inline const std::string& NetifeComposerRequest::_internal_dst_ip_port() const {
  return _impl_.dst_ip_port_.Get();
}
inline void NetifeComposerRequest::_internal_set_dst_ip_port(const std::string& value) {
  
  _impl_.dst_ip_port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::_internal_mutable_dst_ip_port() {
  
  return _impl_.dst_ip_port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::release_dst_ip_port() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeComposerRequest.dst_ip_port)
  return _impl_.dst_ip_port_.Release();
}
inline void NetifeComposerRequest::set_allocated_dst_ip_port(std::string* dst_ip_port) {
  if (dst_ip_port != nullptr) {
    
  } else {
    
  }
  _impl_.dst_ip_port_.SetAllocated(dst_ip_port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dst_ip_port_.IsDefault()) {
    _impl_.dst_ip_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeComposerRequest.dst_ip_port)
}

// string src_ip_addr = 5;
inline void NetifeComposerRequest::clear_src_ip_addr() {
  _impl_.src_ip_addr_.ClearToEmpty();
}
inline const std::string& NetifeComposerRequest::src_ip_addr() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerRequest.src_ip_addr)
  return _internal_src_ip_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeComposerRequest::set_src_ip_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_ip_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerRequest.src_ip_addr)
}
inline std::string* NetifeComposerRequest::mutable_src_ip_addr() {
  std::string* _s = _internal_mutable_src_ip_addr();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeComposerRequest.src_ip_addr)
  return _s;
}
inline const std::string& NetifeComposerRequest::_internal_src_ip_addr() const {
  return _impl_.src_ip_addr_.Get();
}
inline void NetifeComposerRequest::_internal_set_src_ip_addr(const std::string& value) {
  
  _impl_.src_ip_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::_internal_mutable_src_ip_addr() {
  
  return _impl_.src_ip_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::release_src_ip_addr() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeComposerRequest.src_ip_addr)
  return _impl_.src_ip_addr_.Release();
}
inline void NetifeComposerRequest::set_allocated_src_ip_addr(std::string* src_ip_addr) {
  if (src_ip_addr != nullptr) {
    
  } else {
    
  }
  _impl_.src_ip_addr_.SetAllocated(src_ip_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_ip_addr_.IsDefault()) {
    _impl_.src_ip_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeComposerRequest.src_ip_addr)
}

// string src_ip_port = 6;
inline void NetifeComposerRequest::clear_src_ip_port() {
  _impl_.src_ip_port_.ClearToEmpty();
}
inline const std::string& NetifeComposerRequest::src_ip_port() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerRequest.src_ip_port)
  return _internal_src_ip_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeComposerRequest::set_src_ip_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_ip_port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerRequest.src_ip_port)
}
inline std::string* NetifeComposerRequest::mutable_src_ip_port() {
  std::string* _s = _internal_mutable_src_ip_port();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeComposerRequest.src_ip_port)
  return _s;
}
inline const std::string& NetifeComposerRequest::_internal_src_ip_port() const {
  return _impl_.src_ip_port_.Get();
}
inline void NetifeComposerRequest::_internal_set_src_ip_port(const std::string& value) {
  
  _impl_.src_ip_port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::_internal_mutable_src_ip_port() {
  
  return _impl_.src_ip_port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::release_src_ip_port() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeComposerRequest.src_ip_port)
  return _impl_.src_ip_port_.Release();
}
inline void NetifeComposerRequest::set_allocated_src_ip_port(std::string* src_ip_port) {
  if (src_ip_port != nullptr) {
    
  } else {
    
  }
  _impl_.src_ip_port_.SetAllocated(src_ip_port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_ip_port_.IsDefault()) {
    _impl_.src_ip_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeComposerRequest.src_ip_port)
}

// bool is_raw_text = 7;
inline void NetifeComposerRequest::clear_is_raw_text() {
  _impl_.is_raw_text_ = false;
}
inline bool NetifeComposerRequest::_internal_is_raw_text() const {
  return _impl_.is_raw_text_;
}
inline bool NetifeComposerRequest::is_raw_text() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerRequest.is_raw_text)
  return _internal_is_raw_text();
}
inline void NetifeComposerRequest::_internal_set_is_raw_text(bool value) {
  
  _impl_.is_raw_text_ = value;
}
inline void NetifeComposerRequest::set_is_raw_text(bool value) {
  _internal_set_is_raw_text(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerRequest.is_raw_text)
}

// optional int32 uuid_sub = 8;
inline bool NetifeComposerRequest::_internal_has_uuid_sub() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetifeComposerRequest::has_uuid_sub() const {
  return _internal_has_uuid_sub();
}
inline void NetifeComposerRequest::clear_uuid_sub() {
  _impl_.uuid_sub_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t NetifeComposerRequest::_internal_uuid_sub() const {
  return _impl_.uuid_sub_;
}
inline int32_t NetifeComposerRequest::uuid_sub() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerRequest.uuid_sub)
  return _internal_uuid_sub();
}
inline void NetifeComposerRequest::_internal_set_uuid_sub(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uuid_sub_ = value;
}
inline void NetifeComposerRequest::set_uuid_sub(int32_t value) {
  _internal_set_uuid_sub(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerRequest.uuid_sub)
}

// string raw_text = 9;
inline void NetifeComposerRequest::clear_raw_text() {
  _impl_.raw_text_.ClearToEmpty();
}
inline const std::string& NetifeComposerRequest::raw_text() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerRequest.raw_text)
  return _internal_raw_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeComposerRequest::set_raw_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.raw_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerRequest.raw_text)
}
inline std::string* NetifeComposerRequest::mutable_raw_text() {
  std::string* _s = _internal_mutable_raw_text();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeComposerRequest.raw_text)
  return _s;
}
inline const std::string& NetifeComposerRequest::_internal_raw_text() const {
  return _impl_.raw_text_.Get();
}
inline void NetifeComposerRequest::_internal_set_raw_text(const std::string& value) {
  
  _impl_.raw_text_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::_internal_mutable_raw_text() {
  
  return _impl_.raw_text_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeComposerRequest::release_raw_text() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeComposerRequest.raw_text)
  return _impl_.raw_text_.Release();
}
inline void NetifeComposerRequest::set_allocated_raw_text(std::string* raw_text) {
  if (raw_text != nullptr) {
    
  } else {
    
  }
  _impl_.raw_text_.SetAllocated(raw_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_text_.IsDefault()) {
    _impl_.raw_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeComposerRequest.raw_text)
}

// -------------------------------------------------------------------

// NetifeComposerResponse

// string uuid = 1;
inline void NetifeComposerResponse::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& NetifeComposerResponse::uuid() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerResponse.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeComposerResponse::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerResponse.uuid)
}
inline std::string* NetifeComposerResponse::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeComposerResponse.uuid)
  return _s;
}
inline const std::string& NetifeComposerResponse::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void NetifeComposerResponse::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeComposerResponse::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeComposerResponse::release_uuid() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeComposerResponse.uuid)
  return _impl_.uuid_.Release();
}
inline void NetifeComposerResponse::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeComposerResponse.uuid)
}

// string raw_back = 2;
inline void NetifeComposerResponse::clear_raw_back() {
  _impl_.raw_back_.ClearToEmpty();
}
inline const std::string& NetifeComposerResponse::raw_back() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeComposerResponse.raw_back)
  return _internal_raw_back();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeComposerResponse::set_raw_back(ArgT0&& arg0, ArgT... args) {
 
 _impl_.raw_back_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeComposerResponse.raw_back)
}
inline std::string* NetifeComposerResponse::mutable_raw_back() {
  std::string* _s = _internal_mutable_raw_back();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeComposerResponse.raw_back)
  return _s;
}
inline const std::string& NetifeComposerResponse::_internal_raw_back() const {
  return _impl_.raw_back_.Get();
}
inline void NetifeComposerResponse::_internal_set_raw_back(const std::string& value) {
  
  _impl_.raw_back_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeComposerResponse::_internal_mutable_raw_back() {
  
  return _impl_.raw_back_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeComposerResponse::release_raw_back() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeComposerResponse.raw_back)
  return _impl_.raw_back_.Release();
}
inline void NetifeComposerResponse::set_allocated_raw_back(std::string* raw_back) {
  if (raw_back != nullptr) {
    
  } else {
    
  }
  _impl_.raw_back_.SetAllocated(raw_back, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.raw_back_.IsDefault()) {
    _impl_.raw_back_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeComposerResponse.raw_back)
}

// -------------------------------------------------------------------

// NetifePluginCommandRequest

// string namespace = 1;
inline void NetifePluginCommandRequest::clear_namespace_() {
  _impl_.namespace__.ClearToEmpty();
}
inline const std::string& NetifePluginCommandRequest::namespace_() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifePluginCommandRequest.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifePluginCommandRequest::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.namespace__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifePluginCommandRequest.namespace)
}
inline std::string* NetifePluginCommandRequest::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifePluginCommandRequest.namespace)
  return _s;
}
inline const std::string& NetifePluginCommandRequest::_internal_namespace_() const {
  return _impl_.namespace__.Get();
}
inline void NetifePluginCommandRequest::_internal_set_namespace_(const std::string& value) {
  
  _impl_.namespace__.Set(value, GetArenaForAllocation());
}
inline std::string* NetifePluginCommandRequest::_internal_mutable_namespace_() {
  
  return _impl_.namespace__.Mutable(GetArenaForAllocation());
}
inline std::string* NetifePluginCommandRequest::release_namespace_() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifePluginCommandRequest.namespace)
  return _impl_.namespace__.Release();
}
inline void NetifePluginCommandRequest::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  _impl_.namespace__.SetAllocated(namespace_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespace__.IsDefault()) {
    _impl_.namespace__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifePluginCommandRequest.namespace)
}

// string command_prefix = 2;
inline void NetifePluginCommandRequest::clear_command_prefix() {
  _impl_.command_prefix_.ClearToEmpty();
}
inline const std::string& NetifePluginCommandRequest::command_prefix() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifePluginCommandRequest.command_prefix)
  return _internal_command_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifePluginCommandRequest::set_command_prefix(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifePluginCommandRequest.command_prefix)
}
inline std::string* NetifePluginCommandRequest::mutable_command_prefix() {
  std::string* _s = _internal_mutable_command_prefix();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifePluginCommandRequest.command_prefix)
  return _s;
}
inline const std::string& NetifePluginCommandRequest::_internal_command_prefix() const {
  return _impl_.command_prefix_.Get();
}
inline void NetifePluginCommandRequest::_internal_set_command_prefix(const std::string& value) {
  
  _impl_.command_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifePluginCommandRequest::_internal_mutable_command_prefix() {
  
  return _impl_.command_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifePluginCommandRequest::release_command_prefix() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifePluginCommandRequest.command_prefix)
  return _impl_.command_prefix_.Release();
}
inline void NetifePluginCommandRequest::set_allocated_command_prefix(std::string* command_prefix) {
  if (command_prefix != nullptr) {
    
  } else {
    
  }
  _impl_.command_prefix_.SetAllocated(command_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_prefix_.IsDefault()) {
    _impl_.command_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifePluginCommandRequest.command_prefix)
}

// repeated string params = 3;
inline int NetifePluginCommandRequest::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int NetifePluginCommandRequest::params_size() const {
  return _internal_params_size();
}
inline void NetifePluginCommandRequest::clear_params() {
  _impl_.params_.Clear();
}
inline std::string* NetifePluginCommandRequest::add_params() {
  std::string* _s = _internal_add_params();
  // @@protoc_insertion_point(field_add_mutable:NetifeMessage.NetifePluginCommandRequest.params)
  return _s;
}
inline const std::string& NetifePluginCommandRequest::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const std::string& NetifePluginCommandRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifePluginCommandRequest.params)
  return _internal_params(index);
}
inline std::string* NetifePluginCommandRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifePluginCommandRequest.params)
  return _impl_.params_.Mutable(index);
}
inline void NetifePluginCommandRequest::set_params(int index, const std::string& value) {
  _impl_.params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifePluginCommandRequest.params)
}
inline void NetifePluginCommandRequest::set_params(int index, std::string&& value) {
  _impl_.params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifePluginCommandRequest.params)
}
inline void NetifePluginCommandRequest::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetifeMessage.NetifePluginCommandRequest.params)
}
inline void NetifePluginCommandRequest::set_params(int index, const char* value, size_t size) {
  _impl_.params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetifeMessage.NetifePluginCommandRequest.params)
}
inline std::string* NetifePluginCommandRequest::_internal_add_params() {
  return _impl_.params_.Add();
}
inline void NetifePluginCommandRequest::add_params(const std::string& value) {
  _impl_.params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetifeMessage.NetifePluginCommandRequest.params)
}
inline void NetifePluginCommandRequest::add_params(std::string&& value) {
  _impl_.params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NetifeMessage.NetifePluginCommandRequest.params)
}
inline void NetifePluginCommandRequest::add_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetifeMessage.NetifePluginCommandRequest.params)
}
inline void NetifePluginCommandRequest::add_params(const char* value, size_t size) {
  _impl_.params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetifeMessage.NetifePluginCommandRequest.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetifePluginCommandRequest::params() const {
  // @@protoc_insertion_point(field_list:NetifeMessage.NetifePluginCommandRequest.params)
  return _impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetifePluginCommandRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:NetifeMessage.NetifePluginCommandRequest.params)
  return &_impl_.params_;
}

// optional string uuid = 4;
inline bool NetifePluginCommandRequest::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetifePluginCommandRequest::has_uuid() const {
  return _internal_has_uuid();
}
inline void NetifePluginCommandRequest::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetifePluginCommandRequest::uuid() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifePluginCommandRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifePluginCommandRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifePluginCommandRequest.uuid)
}
inline std::string* NetifePluginCommandRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifePluginCommandRequest.uuid)
  return _s;
}
inline const std::string& NetifePluginCommandRequest::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void NetifePluginCommandRequest::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifePluginCommandRequest::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifePluginCommandRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifePluginCommandRequest.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifePluginCommandRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifePluginCommandRequest.uuid)
}

// optional int32 uuid_sub = 5;
inline bool NetifePluginCommandRequest::_internal_has_uuid_sub() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetifePluginCommandRequest::has_uuid_sub() const {
  return _internal_has_uuid_sub();
}
inline void NetifePluginCommandRequest::clear_uuid_sub() {
  _impl_.uuid_sub_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t NetifePluginCommandRequest::_internal_uuid_sub() const {
  return _impl_.uuid_sub_;
}
inline int32_t NetifePluginCommandRequest::uuid_sub() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifePluginCommandRequest.uuid_sub)
  return _internal_uuid_sub();
}
inline void NetifePluginCommandRequest::_internal_set_uuid_sub(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uuid_sub_ = value;
}
inline void NetifePluginCommandRequest::set_uuid_sub(int32_t value) {
  _internal_set_uuid_sub(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifePluginCommandRequest.uuid_sub)
}

// -------------------------------------------------------------------

// NetifePluginCommandResponse

// bool status = 1;
inline void NetifePluginCommandResponse::clear_status() {
  _impl_.status_ = false;
}
inline bool NetifePluginCommandResponse::_internal_status() const {
  return _impl_.status_;
}
inline bool NetifePluginCommandResponse::status() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifePluginCommandResponse.status)
  return _internal_status();
}
inline void NetifePluginCommandResponse::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void NetifePluginCommandResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifePluginCommandResponse.status)
}

// string result = 2;
inline void NetifePluginCommandResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& NetifePluginCommandResponse::result() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifePluginCommandResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifePluginCommandResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifePluginCommandResponse.result)
}
inline std::string* NetifePluginCommandResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifePluginCommandResponse.result)
  return _s;
}
inline const std::string& NetifePluginCommandResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void NetifePluginCommandResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifePluginCommandResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifePluginCommandResponse::release_result() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifePluginCommandResponse.result)
  return _impl_.result_.Release();
}
inline void NetifePluginCommandResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifePluginCommandResponse.result)
}

// -------------------------------------------------------------------

// NetifeScriptRegisterRequest

// string script_name = 1;
inline void NetifeScriptRegisterRequest::clear_script_name() {
  _impl_.script_name_.ClearToEmpty();
}
inline const std::string& NetifeScriptRegisterRequest::script_name() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.script_name)
  return _internal_script_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_script_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.script_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.script_name)
}
inline std::string* NetifeScriptRegisterRequest::mutable_script_name() {
  std::string* _s = _internal_mutable_script_name();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.script_name)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_script_name() const {
  return _impl_.script_name_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_script_name(const std::string& value) {
  
  _impl_.script_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_script_name() {
  
  return _impl_.script_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_script_name() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.script_name)
  return _impl_.script_name_.Release();
}
inline void NetifeScriptRegisterRequest::set_allocated_script_name(std::string* script_name) {
  if (script_name != nullptr) {
    
  } else {
    
  }
  _impl_.script_name_.SetAllocated(script_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_name_.IsDefault()) {
    _impl_.script_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.script_name)
}

// string script_description = 2;
inline void NetifeScriptRegisterRequest::clear_script_description() {
  _impl_.script_description_.ClearToEmpty();
}
inline const std::string& NetifeScriptRegisterRequest::script_description() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.script_description)
  return _internal_script_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_script_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.script_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.script_description)
}
inline std::string* NetifeScriptRegisterRequest::mutable_script_description() {
  std::string* _s = _internal_mutable_script_description();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.script_description)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_script_description() const {
  return _impl_.script_description_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_script_description(const std::string& value) {
  
  _impl_.script_description_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_script_description() {
  
  return _impl_.script_description_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_script_description() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.script_description)
  return _impl_.script_description_.Release();
}
inline void NetifeScriptRegisterRequest::set_allocated_script_description(std::string* script_description) {
  if (script_description != nullptr) {
    
  } else {
    
  }
  _impl_.script_description_.SetAllocated(script_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_description_.IsDefault()) {
    _impl_.script_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.script_description)
}

// optional string trigger_addr = 3;
inline bool NetifeScriptRegisterRequest::_internal_has_trigger_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetifeScriptRegisterRequest::has_trigger_addr() const {
  return _internal_has_trigger_addr();
}
inline void NetifeScriptRegisterRequest::clear_trigger_addr() {
  _impl_.trigger_addr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetifeScriptRegisterRequest::trigger_addr() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.trigger_addr)
  return _internal_trigger_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_trigger_addr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.trigger_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.trigger_addr)
}
inline std::string* NetifeScriptRegisterRequest::mutable_trigger_addr() {
  std::string* _s = _internal_mutable_trigger_addr();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.trigger_addr)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_trigger_addr() const {
  return _impl_.trigger_addr_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_trigger_addr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trigger_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_trigger_addr() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.trigger_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_trigger_addr() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.trigger_addr)
  if (!_internal_has_trigger_addr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.trigger_addr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_addr_.IsDefault()) {
    _impl_.trigger_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifeScriptRegisterRequest::set_allocated_trigger_addr(std::string* trigger_addr) {
  if (trigger_addr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.trigger_addr_.SetAllocated(trigger_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_addr_.IsDefault()) {
    _impl_.trigger_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.trigger_addr)
}

// optional string trigger_port = 4;
inline bool NetifeScriptRegisterRequest::_internal_has_trigger_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetifeScriptRegisterRequest::has_trigger_port() const {
  return _internal_has_trigger_port();
}
inline void NetifeScriptRegisterRequest::clear_trigger_port() {
  _impl_.trigger_port_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetifeScriptRegisterRequest::trigger_port() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.trigger_port)
  return _internal_trigger_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_trigger_port(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.trigger_port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.trigger_port)
}
inline std::string* NetifeScriptRegisterRequest::mutable_trigger_port() {
  std::string* _s = _internal_mutable_trigger_port();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.trigger_port)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_trigger_port() const {
  return _impl_.trigger_port_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_trigger_port(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trigger_port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_trigger_port() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.trigger_port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_trigger_port() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.trigger_port)
  if (!_internal_has_trigger_port()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.trigger_port_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_port_.IsDefault()) {
    _impl_.trigger_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifeScriptRegisterRequest::set_allocated_trigger_port(std::string* trigger_port) {
  if (trigger_port != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.trigger_port_.SetAllocated(trigger_port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_port_.IsDefault()) {
    _impl_.trigger_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.trigger_port)
}

// optional string trigger_spread_chain = 5;
inline bool NetifeScriptRegisterRequest::_internal_has_trigger_spread_chain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetifeScriptRegisterRequest::has_trigger_spread_chain() const {
  return _internal_has_trigger_spread_chain();
}
inline void NetifeScriptRegisterRequest::clear_trigger_spread_chain() {
  _impl_.trigger_spread_chain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NetifeScriptRegisterRequest::trigger_spread_chain() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain)
  return _internal_trigger_spread_chain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_trigger_spread_chain(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.trigger_spread_chain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain)
}
inline std::string* NetifeScriptRegisterRequest::mutable_trigger_spread_chain() {
  std::string* _s = _internal_mutable_trigger_spread_chain();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_trigger_spread_chain() const {
  return _impl_.trigger_spread_chain_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_trigger_spread_chain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.trigger_spread_chain_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_trigger_spread_chain() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.trigger_spread_chain_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_trigger_spread_chain() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain)
  if (!_internal_has_trigger_spread_chain()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.trigger_spread_chain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_spread_chain_.IsDefault()) {
    _impl_.trigger_spread_chain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifeScriptRegisterRequest::set_allocated_trigger_spread_chain(std::string* trigger_spread_chain) {
  if (trigger_spread_chain != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.trigger_spread_chain_.SetAllocated(trigger_spread_chain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_spread_chain_.IsDefault()) {
    _impl_.trigger_spread_chain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain)
}

// optional string trigger_spread_plugin = 6;
inline bool NetifeScriptRegisterRequest::_internal_has_trigger_spread_plugin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetifeScriptRegisterRequest::has_trigger_spread_plugin() const {
  return _internal_has_trigger_spread_plugin();
}
inline void NetifeScriptRegisterRequest::clear_trigger_spread_plugin() {
  _impl_.trigger_spread_plugin_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NetifeScriptRegisterRequest::trigger_spread_plugin() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin)
  return _internal_trigger_spread_plugin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_trigger_spread_plugin(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.trigger_spread_plugin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin)
}
inline std::string* NetifeScriptRegisterRequest::mutable_trigger_spread_plugin() {
  std::string* _s = _internal_mutable_trigger_spread_plugin();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_trigger_spread_plugin() const {
  return _impl_.trigger_spread_plugin_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_trigger_spread_plugin(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.trigger_spread_plugin_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_trigger_spread_plugin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.trigger_spread_plugin_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_trigger_spread_plugin() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin)
  if (!_internal_has_trigger_spread_plugin()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.trigger_spread_plugin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_spread_plugin_.IsDefault()) {
    _impl_.trigger_spread_plugin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifeScriptRegisterRequest::set_allocated_trigger_spread_plugin(std::string* trigger_spread_plugin) {
  if (trigger_spread_plugin != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.trigger_spread_plugin_.SetAllocated(trigger_spread_plugin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_spread_plugin_.IsDefault()) {
    _impl_.trigger_spread_plugin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin)
}

// optional string trigger_spread_chain_before = 7;
inline bool NetifeScriptRegisterRequest::_internal_has_trigger_spread_chain_before() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetifeScriptRegisterRequest::has_trigger_spread_chain_before() const {
  return _internal_has_trigger_spread_chain_before();
}
inline void NetifeScriptRegisterRequest::clear_trigger_spread_chain_before() {
  _impl_.trigger_spread_chain_before_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NetifeScriptRegisterRequest::trigger_spread_chain_before() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain_before)
  return _internal_trigger_spread_chain_before();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_trigger_spread_chain_before(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.trigger_spread_chain_before_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain_before)
}
inline std::string* NetifeScriptRegisterRequest::mutable_trigger_spread_chain_before() {
  std::string* _s = _internal_mutable_trigger_spread_chain_before();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain_before)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_trigger_spread_chain_before() const {
  return _impl_.trigger_spread_chain_before_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_trigger_spread_chain_before(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.trigger_spread_chain_before_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_trigger_spread_chain_before() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.trigger_spread_chain_before_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_trigger_spread_chain_before() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain_before)
  if (!_internal_has_trigger_spread_chain_before()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.trigger_spread_chain_before_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_spread_chain_before_.IsDefault()) {
    _impl_.trigger_spread_chain_before_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifeScriptRegisterRequest::set_allocated_trigger_spread_chain_before(std::string* trigger_spread_chain_before) {
  if (trigger_spread_chain_before != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.trigger_spread_chain_before_.SetAllocated(trigger_spread_chain_before, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_spread_chain_before_.IsDefault()) {
    _impl_.trigger_spread_chain_before_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_chain_before)
}

// optional string trigger_spread_plugin_before = 8;
inline bool NetifeScriptRegisterRequest::_internal_has_trigger_spread_plugin_before() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetifeScriptRegisterRequest::has_trigger_spread_plugin_before() const {
  return _internal_has_trigger_spread_plugin_before();
}
inline void NetifeScriptRegisterRequest::clear_trigger_spread_plugin_before() {
  _impl_.trigger_spread_plugin_before_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NetifeScriptRegisterRequest::trigger_spread_plugin_before() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin_before)
  return _internal_trigger_spread_plugin_before();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_trigger_spread_plugin_before(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.trigger_spread_plugin_before_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin_before)
}
inline std::string* NetifeScriptRegisterRequest::mutable_trigger_spread_plugin_before() {
  std::string* _s = _internal_mutable_trigger_spread_plugin_before();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin_before)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_trigger_spread_plugin_before() const {
  return _impl_.trigger_spread_plugin_before_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_trigger_spread_plugin_before(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.trigger_spread_plugin_before_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_trigger_spread_plugin_before() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.trigger_spread_plugin_before_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_trigger_spread_plugin_before() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin_before)
  if (!_internal_has_trigger_spread_plugin_before()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.trigger_spread_plugin_before_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_spread_plugin_before_.IsDefault()) {
    _impl_.trigger_spread_plugin_before_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NetifeScriptRegisterRequest::set_allocated_trigger_spread_plugin_before(std::string* trigger_spread_plugin_before) {
  if (trigger_spread_plugin_before != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.trigger_spread_plugin_before_.SetAllocated(trigger_spread_plugin_before, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_spread_plugin_before_.IsDefault()) {
    _impl_.trigger_spread_plugin_before_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.trigger_spread_plugin_before)
}

// string script_content = 9;
inline void NetifeScriptRegisterRequest::clear_script_content() {
  _impl_.script_content_.ClearToEmpty();
}
inline const std::string& NetifeScriptRegisterRequest::script_content() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.script_content)
  return _internal_script_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_script_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.script_content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.script_content)
}
inline std::string* NetifeScriptRegisterRequest::mutable_script_content() {
  std::string* _s = _internal_mutable_script_content();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.script_content)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_script_content() const {
  return _impl_.script_content_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_script_content(const std::string& value) {
  
  _impl_.script_content_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_script_content() {
  
  return _impl_.script_content_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_script_content() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.script_content)
  return _impl_.script_content_.Release();
}
inline void NetifeScriptRegisterRequest::set_allocated_script_content(std::string* script_content) {
  if (script_content != nullptr) {
    
  } else {
    
  }
  _impl_.script_content_.SetAllocated(script_content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_content_.IsDefault()) {
    _impl_.script_content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.script_content)
}

// string version = 10;
inline void NetifeScriptRegisterRequest::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& NetifeScriptRegisterRequest::version() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterRequest.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterRequest::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterRequest.version)
}
inline std::string* NetifeScriptRegisterRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterRequest.version)
  return _s;
}
inline const std::string& NetifeScriptRegisterRequest::_internal_version() const {
  return _impl_.version_.Get();
}
inline void NetifeScriptRegisterRequest::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterRequest::release_version() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterRequest.version)
  return _impl_.version_.Release();
}
inline void NetifeScriptRegisterRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterRequest.version)
}

// -------------------------------------------------------------------

// NetifeScriptRegisterResponse

// bool status = 1;
inline void NetifeScriptRegisterResponse::clear_status() {
  _impl_.status_ = false;
}
inline bool NetifeScriptRegisterResponse::_internal_status() const {
  return _impl_.status_;
}
inline bool NetifeScriptRegisterResponse::status() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterResponse.status)
  return _internal_status();
}
inline void NetifeScriptRegisterResponse::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void NetifeScriptRegisterResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterResponse.status)
}

// string result = 2;
inline void NetifeScriptRegisterResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& NetifeScriptRegisterResponse::result() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptRegisterResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptRegisterResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptRegisterResponse.result)
}
inline std::string* NetifeScriptRegisterResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptRegisterResponse.result)
  return _s;
}
inline const std::string& NetifeScriptRegisterResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void NetifeScriptRegisterResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptRegisterResponse::release_result() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptRegisterResponse.result)
  return _impl_.result_.Release();
}
inline void NetifeScriptRegisterResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptRegisterResponse.result)
}

// -------------------------------------------------------------------

// NetifeScriptDebuggerRequest

// string script_name = 1;
inline void NetifeScriptDebuggerRequest::clear_script_name() {
  _impl_.script_name_.ClearToEmpty();
}
inline const std::string& NetifeScriptDebuggerRequest::script_name() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptDebuggerRequest.script_name)
  return _internal_script_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptDebuggerRequest::set_script_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.script_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptDebuggerRequest.script_name)
}
inline std::string* NetifeScriptDebuggerRequest::mutable_script_name() {
  std::string* _s = _internal_mutable_script_name();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptDebuggerRequest.script_name)
  return _s;
}
inline const std::string& NetifeScriptDebuggerRequest::_internal_script_name() const {
  return _impl_.script_name_.Get();
}
inline void NetifeScriptDebuggerRequest::_internal_set_script_name(const std::string& value) {
  
  _impl_.script_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptDebuggerRequest::_internal_mutable_script_name() {
  
  return _impl_.script_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptDebuggerRequest::release_script_name() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptDebuggerRequest.script_name)
  return _impl_.script_name_.Release();
}
inline void NetifeScriptDebuggerRequest::set_allocated_script_name(std::string* script_name) {
  if (script_name != nullptr) {
    
  } else {
    
  }
  _impl_.script_name_.SetAllocated(script_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_name_.IsDefault()) {
    _impl_.script_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptDebuggerRequest.script_name)
}

// -------------------------------------------------------------------

// NetifeScriptDebuggerResponse

// string ws_addr = 1;
inline void NetifeScriptDebuggerResponse::clear_ws_addr() {
  _impl_.ws_addr_.ClearToEmpty();
}
inline const std::string& NetifeScriptDebuggerResponse::ws_addr() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptDebuggerResponse.ws_addr)
  return _internal_ws_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptDebuggerResponse::set_ws_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ws_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptDebuggerResponse.ws_addr)
}
inline std::string* NetifeScriptDebuggerResponse::mutable_ws_addr() {
  std::string* _s = _internal_mutable_ws_addr();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptDebuggerResponse.ws_addr)
  return _s;
}
inline const std::string& NetifeScriptDebuggerResponse::_internal_ws_addr() const {
  return _impl_.ws_addr_.Get();
}
inline void NetifeScriptDebuggerResponse::_internal_set_ws_addr(const std::string& value) {
  
  _impl_.ws_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptDebuggerResponse::_internal_mutable_ws_addr() {
  
  return _impl_.ws_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptDebuggerResponse::release_ws_addr() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptDebuggerResponse.ws_addr)
  return _impl_.ws_addr_.Release();
}
inline void NetifeScriptDebuggerResponse::set_allocated_ws_addr(std::string* ws_addr) {
  if (ws_addr != nullptr) {
    
  } else {
    
  }
  _impl_.ws_addr_.SetAllocated(ws_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ws_addr_.IsDefault()) {
    _impl_.ws_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptDebuggerResponse.ws_addr)
}

// string ws_port = 2;
inline void NetifeScriptDebuggerResponse::clear_ws_port() {
  _impl_.ws_port_.ClearToEmpty();
}
inline const std::string& NetifeScriptDebuggerResponse::ws_port() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptDebuggerResponse.ws_port)
  return _internal_ws_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptDebuggerResponse::set_ws_port(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ws_port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptDebuggerResponse.ws_port)
}
inline std::string* NetifeScriptDebuggerResponse::mutable_ws_port() {
  std::string* _s = _internal_mutable_ws_port();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptDebuggerResponse.ws_port)
  return _s;
}
inline const std::string& NetifeScriptDebuggerResponse::_internal_ws_port() const {
  return _impl_.ws_port_.Get();
}
inline void NetifeScriptDebuggerResponse::_internal_set_ws_port(const std::string& value) {
  
  _impl_.ws_port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptDebuggerResponse::_internal_mutable_ws_port() {
  
  return _impl_.ws_port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptDebuggerResponse::release_ws_port() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptDebuggerResponse.ws_port)
  return _impl_.ws_port_.Release();
}
inline void NetifeScriptDebuggerResponse::set_allocated_ws_port(std::string* ws_port) {
  if (ws_port != nullptr) {
    
  } else {
    
  }
  _impl_.ws_port_.SetAllocated(ws_port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ws_port_.IsDefault()) {
    _impl_.ws_port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptDebuggerResponse.ws_port)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetifeScriptCommandRequest

// string script_name = 1;
inline void NetifeScriptCommandRequest::clear_script_name() {
  _impl_.script_name_.ClearToEmpty();
}
inline const std::string& NetifeScriptCommandRequest::script_name() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptCommandRequest.script_name)
  return _internal_script_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptCommandRequest::set_script_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.script_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptCommandRequest.script_name)
}
inline std::string* NetifeScriptCommandRequest::mutable_script_name() {
  std::string* _s = _internal_mutable_script_name();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptCommandRequest.script_name)
  return _s;
}
inline const std::string& NetifeScriptCommandRequest::_internal_script_name() const {
  return _impl_.script_name_.Get();
}
inline void NetifeScriptCommandRequest::_internal_set_script_name(const std::string& value) {
  
  _impl_.script_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptCommandRequest::_internal_mutable_script_name() {
  
  return _impl_.script_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptCommandRequest::release_script_name() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptCommandRequest.script_name)
  return _impl_.script_name_.Release();
}
inline void NetifeScriptCommandRequest::set_allocated_script_name(std::string* script_name) {
  if (script_name != nullptr) {
    
  } else {
    
  }
  _impl_.script_name_.SetAllocated(script_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_name_.IsDefault()) {
    _impl_.script_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptCommandRequest.script_name)
}

// string export_function = 2;
inline void NetifeScriptCommandRequest::clear_export_function() {
  _impl_.export_function_.ClearToEmpty();
}
inline const std::string& NetifeScriptCommandRequest::export_function() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptCommandRequest.export_function)
  return _internal_export_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptCommandRequest::set_export_function(ArgT0&& arg0, ArgT... args) {
 
 _impl_.export_function_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptCommandRequest.export_function)
}
inline std::string* NetifeScriptCommandRequest::mutable_export_function() {
  std::string* _s = _internal_mutable_export_function();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptCommandRequest.export_function)
  return _s;
}
inline const std::string& NetifeScriptCommandRequest::_internal_export_function() const {
  return _impl_.export_function_.Get();
}
inline void NetifeScriptCommandRequest::_internal_set_export_function(const std::string& value) {
  
  _impl_.export_function_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptCommandRequest::_internal_mutable_export_function() {
  
  return _impl_.export_function_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptCommandRequest::release_export_function() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptCommandRequest.export_function)
  return _impl_.export_function_.Release();
}
inline void NetifeScriptCommandRequest::set_allocated_export_function(std::string* export_function) {
  if (export_function != nullptr) {
    
  } else {
    
  }
  _impl_.export_function_.SetAllocated(export_function, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.export_function_.IsDefault()) {
    _impl_.export_function_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptCommandRequest.export_function)
}

// map<string, string> params = 3;
inline int NetifeScriptCommandRequest::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int NetifeScriptCommandRequest::params_size() const {
  return _internal_params_size();
}
inline void NetifeScriptCommandRequest::clear_params() {
  _impl_.params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NetifeScriptCommandRequest::_internal_params() const {
  return _impl_.params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NetifeScriptCommandRequest::params() const {
  // @@protoc_insertion_point(field_map:NetifeMessage.NetifeScriptCommandRequest.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NetifeScriptCommandRequest::_internal_mutable_params() {
  return _impl_.params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NetifeScriptCommandRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:NetifeMessage.NetifeScriptCommandRequest.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// NetifeScriptCommandResponse

// string result = 1;
inline void NetifeScriptCommandResponse::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& NetifeScriptCommandResponse::result() const {
  // @@protoc_insertion_point(field_get:NetifeMessage.NetifeScriptCommandResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetifeScriptCommandResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NetifeMessage.NetifeScriptCommandResponse.result)
}
inline std::string* NetifeScriptCommandResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:NetifeMessage.NetifeScriptCommandResponse.result)
  return _s;
}
inline const std::string& NetifeScriptCommandResponse::_internal_result() const {
  return _impl_.result_.Get();
}
inline void NetifeScriptCommandResponse::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* NetifeScriptCommandResponse::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* NetifeScriptCommandResponse::release_result() {
  // @@protoc_insertion_point(field_release:NetifeMessage.NetifeScriptCommandResponse.result)
  return _impl_.result_.Release();
}
inline void NetifeScriptCommandResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NetifeMessage.NetifeScriptCommandResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetifeMessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NetifeMessage::NetifeProbeRequest_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetifeMessage::NetifeProbeRequest_RequestType>() {
  return ::NetifeMessage::NetifeProbeRequest_RequestType_descriptor();
}
template <> struct is_proto_enum< ::NetifeMessage::NetifeProbeRequest_ApplicationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetifeMessage::NetifeProbeRequest_ApplicationType>() {
  return ::NetifeMessage::NetifeProbeRequest_ApplicationType_descriptor();
}
template <> struct is_proto_enum< ::NetifeMessage::NetifeProbeRequest_Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetifeMessage::NetifeProbeRequest_Protocol>() {
  return ::NetifeMessage::NetifeProbeRequest_Protocol_descriptor();
}
template <> struct is_proto_enum< ::NetifeMessage::NetifeComposerRequest_ProtocolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NetifeMessage::NetifeComposerRequest_ProtocolType>() {
  return ::NetifeMessage::NetifeComposerRequest_ProtocolType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NetifeMessage_2eproto
